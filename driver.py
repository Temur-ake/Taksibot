import asyncio
import logging
import os
import sys
from datetime import datetime
from os import getenv
import aiogram.exceptions
from aiogram import Router, F, Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from sqlalchemy import update, select

from handlers.inform import IsAdmin, admin_chat_id, pending_drivers, confirm_button1
from keyboards import driver_button, cancel_button, confirm_button, main_button, admin_button, cancel_button1, \
    register_button, tariff_button, driver_location_button
from models import Driver, session, User
from state import DriverState, EditDriverState, AdminState
from aiogram import html

dp = Dispatcher()

driver_router = Router()
dp.include_routers(driver_router)

load_dotenv()
TOKEN = getenv("TOKEND")


@driver_router.message(CommandStart())
async def start_bot(message: Message, state: FSMContext):
    user_id = message.from_user.id
    full_name = html.bold(message.from_user.full_name)
    username = message.from_user.username
    await state.clear()

    # User bazada bor yoki yo‚Äòqligini tekshirish
    existing_user = session.query(User).filter_by(user_id=user_id).first()
    if not existing_user:
        new_user = User(user_id=user_id, username=username)
        session.add(new_user)
        session.commit()

    # Haydovchi bazada bor yoki yo‚Äòqligini tekshirish
    query = select(Driver).where(Driver.telegram_id == str(user_id))
    driver = session.execute(query).scalars().first()

    if driver:
        markup = driver_button()
    else:
        markup = register_button()

    # Xabarni bir marta yuborish
    await message.answer(
        f'–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º, {full_name}\n\n–ë–∏–∑–Ω–∏–Ω–≥ –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑',
        reply_markup=markup
    )

    # Admin uchun tugmalar
    if str(user_id) == os.getenv('ADMIN_ID'):
        await message.answer(
            f'–°–∞–ª–æ–º –∞–¥–º–∏–Ω {full_name}',
            reply_markup=admin_button()
        )


@driver_router.message(F.text == "üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à")
async def contact_with_admin(message: Message):
    await message.answer("–ò–ª—Ç–∏–º–æ—Å —à—É –æ–¥–∞–º–≥–∞ –¢–µ–ª–µ–≥—Ä–∞–º–¥–∞–Ω —ë–∑–∏–Ω–≥ @VPEXadmin")


@driver_router.message(F.text == "–û—Ä—Ç–≥–∞")
async def back(message: Message):
    user_id = message.from_user.id
    query = select(Driver).where(Driver.telegram_id == str(user_id))
    driver = session.execute(query).scalars().first()

    if driver:
        await message.answer('–¢–∞–Ω–ª–∞–Ω–≥ :', reply_markup=driver_button())


@driver_router.message(F.text == "–ë–µ–∫–æ—Ä –∫–∏–ª–∏—à")
async def back(message: Message, state: FSMContext):
    user_id = message.from_user.id
    query = select(Driver).where(Driver.telegram_id == str(user_id))
    driver = session.execute(query).scalars().first()
    if state:
        await state.clear()
    if driver:
        await message.answer('–ë–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏ ‚úÖ', reply_markup=driver_button())
    await message.answer('–ë–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏ ‚úÖ')


@driver_router.message(F.text.func(lambda text: text and text.strip().lower() == "—Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∏—à"))
async def start_shofer(message: Message, state: FSMContext):
    """–ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏ –±–∞–∑–∞–¥–∞ –º–∞–≤–∂—É–¥ –±—û–ª—Å–∞, –º–µ–Ω—é–Ω–∏ –∫—û—Ä—Å–∞—Ç–∞–¥–∏. –ê–∫—Å “≥–æ–ª–¥–∞, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∫–∞–∑–∏—à –±–æ—à–ª–∞–Ω–∞–¥–∏."""
    query = select(Driver).where(Driver.telegram_id == str(message.from_user.id))
    driver = session.execute(query).scalars().first()

    if driver:
        await message.answer("–¢–∞–Ω–ª–∞–Ω–≥:", reply_markup=driver_button())

    else:
        await message.answer(
            "üìù –ò—Å–º-—à–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: –ë–æ—Ç–∏—Ä –ö–æ–¥–∏—Ä–æ–≤ :", reply_markup=cancel_button(message)
        )
        await state.set_state(DriverState.full_name)


@driver_router.message(DriverState.full_name)
async def capture_driver_fullname(message: Message, state: FSMContext):
    """–ò—Å–º-—à–∞—Ä–∏—Ñ–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
    await state.update_data(full_name=message.text)
    await message.answer("üìÜ –Å—à–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: 25 :", reply_markup=cancel_button(message))
    await state.set_state(DriverState.age)


@driver_router.message(DriverState.age)
async def capture_driver_age(message: Message, state: FSMContext):
    """–Å—à–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∞–¥–∏."""
    if not message.text.isdigit():  # üîç –§–∞“õ–∞—Ç —Å–æ–Ω –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —ë—à–∏–Ω–≥–∏–∑–Ω–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º —Å–∏—Ñ–∞—Ç–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥! (–ú–∞—Å–∞–ª–∞–Ω: 25)",
                             reply_markup=cancel_button(message))
        return  # ‚ùå –ê–≥–∞—Ä –Ω–æ—Ç—û“ì—Ä–∏ –±—û–ª—Å–∞, —Ñ—É–Ω–∫—Ü–∏—è–Ω–∏ —Ç—É–≥–∞—Ç–∞–º–∏–∑

    await state.update_data(age=int(message.text))  # ‚úÖ –¢—û“ì—Ä–∏ —ë—à–Ω–∏ —Å–∞“õ–ª–∞—à
    await message.answer("üìç –í–∏–ª–æ—è—Ç–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: –ê–Ω–¥–∏–∂–æ–Ω –π–æ–∫–∏ –¢–æ—à–∫–µ–Ω—Ç:",
                         reply_markup=cancel_button(message))
    await state.set_state(DriverState.city)


# registratsiyadan keyin malumoti rasmsiz va andijondan yoki toshkentdaman deb tugmani ezishiga grurhga tashab qoyadi
# tarifni tanlaydi nomerdan oldin
@driver_router.message(DriverState.city)
async def capture_driver_city(message: Message, state: FSMContext):
    """–®–∞“≥–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
    await state.update_data(city=message.text)
    await message.answer("üè¢ –¢—É–º–∞–Ω–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: –•–æ–∂–∞–æ–±–æ–¥ :", reply_markup=cancel_button(message))
    await state.set_state(DriverState.town)


@driver_router.message(DriverState.town)
async def capture_driver_town(message: Message, state: FSMContext):
    """–¢—É–º–∞–Ω –Ω–æ–º–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
    await state.update_data(town=message.text)
    await message.answer("üöó –ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: –ö–æ–±–∞–ª—Ç :", reply_markup=cancel_button(message))
    await state.set_state(DriverState.type_of_car)


@driver_router.message(DriverState.type_of_car)
async def capture_driver_car_type(message: Message, state: FSMContext):
    """–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
    await state.update_data(type_of_car=message.text)
    await message.answer("üöñ –¢–∞—Ä–∏—Ñ–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:\n"
                         '''
–°—Ç–∞–Ω–¥–∞—Ä—Ç —Ç–∞—Ä–∏—Ñ :

–ê–≤—Ç–æ–º–æ–±–∏–ª —Å–∞–ª–æ–Ω–∏–≥–∞ 4 —Ç–∞ 
–π—É–ª–æ–≤—á–∏ –æ–ª–∏–Ω–∞–¥–∏ 

–ú–∞–Ω–∑–∏–ª–≥–∞ –π–µ—Ç–≥—É–Ω–≥–∞ –∫–∞–¥–∞—Ä —Ç—É—Ö—Ç–∞—à–ª–∞—Ä —Å–æ–Ω–∏ 3 —Ç–∞–¥–∞–Ω –æ—à–º–∞–π–¥–∏

–ê–≤—Ç–æ–º–æ–±–∏–ª–ª–∞—Ä–∏ 1 –≤–∞ 2 –ø–æ–∑–∏—Ü–∏—è –±—É–ª–∞–¥–∏

–ù–∞—Ä—Ö–ª–∞—Ä —É—Ä—Ç–∞—á–∞ –≤–∞ —É–Ω–¥–∞–Ω –∞—Ä–∑–æ–Ω—Ä–æ–∫.

üöñ üöñ üöñ üöñ üöñ üöñ üöñ üöñ üöñ 

–ö–æ–º—Ñ–æ—Ä—Ç —Ç–∞—Ä–∏—Ñ :

–ê–≤—Ç–æ–º–æ–±–∏–ª —Å–∞–ª–æ–Ω–∏–≥–∞ 3 —Ç–∞ 
–π—É–ª–æ–≤—á–∏ –æ–ª–∏–Ω–∞–¥–∏ 

–ú–∞–Ω–∑–∏–ª–≥–∞ –π–µ—Ç–≥—É–Ω–≥–∞ –∫–∞–¥–∞—Ä —Ç—É—Ö—Ç–∞—à–ª–∞—Ä —Å–æ–Ω–∏ 1 —Ç–∞–¥–∞–Ω –æ—à–º–∞–π–¥–∏ (–π—É–ª–æ–≤—á–∏ —ç—Ö—Ç–∏–π–æ–∂–∏ –±—É–Ω–¥–∞–Ω –º—É—Å—Ç–∞—Å–Ω–æ)

–ê–≤—Ç–æ–º–æ–±–∏–ª–ª–∞—Ä–∏  3 –ø–æ–∑–∏—Ü–∏—è –≤–∞ —É–Ω–¥–∞–Ω —é–∫–æ—Ä–∏ –±—É–ª–∞–¥–∏

–ù–∞—Ä—Ö–ª–∞—Ä —É—Ä—Ç–∞—á–∞ –≤–∞ —É–Ω–¥–∞–Ω —Å–∞–ª –∫–∏–º–º–∞—Ç

–ê–≤—Ç–æ–º–æ–±–∏–ª–ª–∞—Ä–∏ –¥–µ–π–∞—Ä–ª–∏ —Ö–∞–º–º–∞—Å–∏–¥–∞ —Ç–∞–Ω–∏—Ä–æ—Ñ–∫–∞ –º–∞–≤–∂—É–¥, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –¥–æ–∏–º–∏–π –æ–± —Ö–∞–≤–æ–≥–∞ –∫–∞—Ä–∞–±, —Å–∞–ª–æ–Ω–¥–∞ –±–µ–∑ –≥–∞–∑ —Å—É–≤ –¥–æ–∏–º–∏–π —Ç–æ–∑–∞ —Å–∞–ª–æ–Ω.
                         ''', reply_markup=tariff_button())
    await state.set_state(DriverState.tariff)


@driver_router.message(DriverState.tariff)
async def capture_driver_car_type(message: Message, state: FSMContext):
    """–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
    if message.text not in ["–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ö–æ–º—Ñ–æ—Ä—Ç"]:
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç–∞—Ä–∏—Ñ–Ω–∏ —Ç—û“ì—Ä–∏ —Ç–∞–Ω–ª–∞–Ω–≥!", reply_markup=tariff_button())
        return
    await state.update_data(tariff=message.text)
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: 970501655 :",
                         reply_markup=cancel_button(message))
    await state.set_state(DriverState.phone_number)


@driver_router.message(DriverState.phone_number)
async def capture_driver_phone_number(message: Message, state: FSMContext):
    if not message.text.isdigit():  # üîç –§–∞“õ–∞—Ç —Å–æ–Ω –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º —Å–∏—Ñ–∞—Ç–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥! (–ú–∞—Å–∞–ª–∞–Ω: 970501655)",
                             reply_markup=cancel_button(message))
        return  # ‚ùå –ê–≥–∞—Ä –Ω–æ—Ç—û“ì—Ä–∏ –±—û–ª—Å–∞, —Ñ—É–Ω–∫—Ü–∏—è–Ω–∏ —Ç—É–≥–∞—Ç–∞–º–∏–∑
    """–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
    await state.update_data(phone_number=int(message.text))
    await message.answer("üìÑ –ü—Ä–∞–≤–∞–Ω–≥–∏–∑–Ω–∏ —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ :", reply_markup=cancel_button(message))
    await state.set_state(DriverState.document)


@driver_router.message(DriverState.document)
async def capture_driver_document(message: Message, state: FSMContext):
    """“≤—É–∂–∂–∞—Ç —Ä–∞—Å–º–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
    if message.photo:
        await state.update_data(document=message.photo[-1].file_id)
        await message.answer("üìÉ –¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ :", reply_markup=cancel_button(message))
        await state.set_state(DriverState.tex_passport)
    else:
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, “≥—É–∂–∂–∞—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥!")


@driver_router.message(DriverState.tex_passport)
async def capture_driver_tex_passport(message: Message, state: FSMContext):
    """–¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏, –±–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —á–∏“õ–∞—Ä–∞–¥–∏ –≤–∞ —Ç–∞—Å–¥–∏“õ–ª–∞—à —Å—û—Ä–∞–π–¥–∏."""

    if not message.photo:
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥!", reply_markup=cancel_button(message))
        return

    # ‚úÖ **–¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —Å–∞“õ–ª–∞—à**
    await state.update_data(tex_passport=message.photo[-1].file_id)

    # üîç **State –¥–∞–≥–∏ –±–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∏—à**
    data = await state.get_data()

    # üìã **“≤–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ –∫–∏—Ä–∏—Ç–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∏—à**
    caption = (
        f"üìã *–°–∏–∑ –∫–∏—Ä–∏—Ç–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä:*\n\n"
        f"üë§ *–ò—Å–º:* {data.get('full_name', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üóì *–Å—à:* {data.get('age', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üèô *–®–∞“≥–∞—Ä:* {data.get('city', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üìç *–¢—É–º–∞–Ω:* {data.get('town', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üöó *–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏:* {data.get('type_of_car', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üòé *–¢–∞—Ä–∏—Ñ —Ç—É—Ä–∏:* {data.get('tariff', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üìû *–¢–µ–ª:* {data.get('phone_number', '–ù–æ–º–∞—ä–ª—É–º')}\n"
    )

    # ‚úÖ **“≤—É–∂–∂–∞—Ç –≤–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–Ω–∏ —é–±–æ—Ä–∏—à**
    if data.get("document"):
        await message.answer_photo(photo=data["document"], caption="üìÑ *–°–∏–∑–Ω–∏–Ω–≥ –ü—Ä–∞–≤–∞–Ω–≥–∏–∑ *", parse_mode="Markdown")

    if data.get("tex_passport"):
        await message.answer_photo(photo=data["tex_passport"], caption="üìÑ *–°–∏–∑–Ω–∏–Ω–≥ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∏–Ω–≥–∏–∑*",
                                   parse_mode="Markdown")

    # ‚úÖ **–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞—à —É—á—É–Ω —é–±–æ—Ä–∏—à**
    await message.answer(caption, parse_mode="Markdown")
    await message.answer("üìã *–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–π—Å–∏–∑–º–∏?*", reply_markup=confirm_button(), parse_mode="Markdown")

    await state.set_state(DriverState.user_confirm)


@driver_router.callback_query(DriverState.user_confirm, F.data == "confirm_yes")
async def process_confirm_yes(callback_query: CallbackQuery, state: FSMContext, bot):
    """–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ (—à–æ—Ñ—ë—Ä) –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ –∞–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏—à."""
    data = await state.get_data()
    telegram_id = str(callback_query.from_user.id)

    if not data:
        await callback_query.message.answer("‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫: –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –π—û“õ–æ–ª–¥–∏! –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
        return

    # ‚úÖ **–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID –Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–≥–∞ “õ—û—à–∏—à**
    data["telegram_id"] = telegram_id

    print(f"‚úÖ –ê–¥–º–∏–Ω —Ç–∞—Å–¥–∏“õ–ª–∞—à —É—á—É–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä: {data}")  # DEBUG

    caption = (
        f"üìã –Ø–Ω–≥–∏ –®–æ—Ñ—ë—Ä:\n"
        f"üë§ –ò—Å–º–∏: {data.get('full_name', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üóì –Å—à–∏: {data.get('age', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üèô –®–∞“≥–∞—Ä: {data.get('city', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üìç –¢—É–º–∞–Ω: {data.get('town', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üöó –ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏: {data.get('type_of_car', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üòé *–¢–∞—Ä–∏—Ñ —Ç—É—Ä–∏:* {data.get('tariff', '–ù–æ–º–∞—ä–ª—É–º')}\n"
        f"üìû –¢–µ–ª: {data.get('phone_number', '–ù–æ–º–∞—ä–ª—É–º')}\n\n\n"
        "–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Ç–∞—Å–¥–∏–∫–ª–∞–π—Å–∏–∑–º–∏?"
    )

    msg = None  # ‚úÖ Ensure msg is always defined

    for admin in admin_chat_id:
        if data.get("document"):
            await bot.send_photo(admin, photo=data["document"], caption="üìÑ “≤—É–∂–∂–∞—Ç (–ü—Ä–∞–≤–∞)")

        if data.get("tex_passport"):
            try:
                msg = await bot.send_photo(admin, photo=data["tex_passport"], caption=caption)
            except:
                msg = await bot.send_document(admin, document=data["tex_passport"], caption=caption)

    if msg:
        message_id = msg.message_id  # ‚úÖ –ê–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏–ª–≥–∞–Ω —Ö–∞–±–∞—Ä ID —Å–∏–Ω–∏ —Å–∞“õ–ª–∞—à
        pending_drivers[message_id] = data  # ‚úÖ **telegram_id –±–∏–ª–∞–Ω –±–∏—Ä–≥–∞ —Å–∞“õ–ª–∞–π–º–∏–∑!**
        print(f"‚úÖ –ú–∞—ä–ª—É–º–æ—Ç —Å–∞“õ–ª–∞–Ω–¥–∏: {message_id} -> {data}")  # ‚úÖ Debug

        await bot.edit_message_reply_markup(
            chat_id=msg.chat.id,
            message_id=message_id,
            reply_markup=confirm_button1(message_id)  # ‚úÖ –•–∞–±–∞—Ä ID –±–∏–ª–∞–Ω —Ç—É–≥–º–∞–ª–∞—Ä —è—Ä–∞—Ç–∏—à
        )

    await callback_query.message.delete()
    await callback_query.message.answer("‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –∞–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏, –∏–ª—Ç–∏–º–æ—Å –∫—É—Ç–∏–± —Ç—É—Ä–∏–Ω–≥.",
                                        reply_markup=main_button())


@driver_router.callback_query(F.data.startswith("admin_yes_"))
async def admin_approve_driver(callback_query: CallbackQuery, bot: Bot):
    """–ê–¥–º–∏–Ω —Ç–∞—Å–¥–∏“õ–ª–∞—Å–∞, —à–æ—Ñ—ë—Ä –±–∞–∑–∞–≥–∞ —Å–∞“õ–ª–∞–Ω–∞–¥–∏."""
    message_id = int(callback_query.data.split("_")[-1])  # ‚úÖ –•–∞–±–∞—Ä ID –Ω–∏ –æ–ª–∏—à

    print(f"üîç –ê–¥–º–∏–Ω —Ç–∞—Å–¥–∏“õ–ª–∞–≥–∞–Ω —Ö–∞–±–∞—Ä ID: {message_id}")  # ‚úÖ DEBUG

    if message_id not in pending_drivers:
        await callback_query.message.answer("‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫: –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏! –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
        return

    —à–æ—Ñ—ë—Ä_data = pending_drivers.pop(message_id)  # ‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∏—à –≤–∞ cachedan —û—á–∏—Ä–∏—à
    user_id = —à–æ—Ñ—ë—Ä_data.get("telegram_id")  # ‚úÖ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ Telegram ID —Å–∏–Ω–∏ –æ–ª–∏—à
    drivergroup = -1002630555042

    await save_driver_to_db(—à–æ—Ñ—ë—Ä_data, callback_query)

    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.answer("‚úÖ –®–æ—Ñ—ë—Ä –±–∞–∑–∞–≥–∞ —Å–∞“õ–ª–∞–Ω–¥–∏!", reply_markup=admin_button())

    if user_id:
        await bot.send_message(user_id, "‚úÖ *–ê–¥–º–∏–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ “õ–∞–±—É–ª “õ–∏–ª–¥–∏!*", parse_mode="Markdown",
                               reply_markup=driver_button())
        await bot.send_message(drivergroup, —à–æ—Ñ—ë—Ä_data)


@driver_router.callback_query(DriverState.user_confirm, F.data == "confirm_no")
async def process_confirm_no(callback_query: CallbackQuery, state: FSMContext):
    """–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —à–æ—Ñ—ë—Ä –±—û–ª–∏—à–¥–∞–Ω –≤–æ–∑ –∫–µ—á–¥–∏."""
    await state.clear()
    await callback_query.message.answer("‚ùå –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.", reply_markup=main_button())


@driver_router.callback_query(F.data.startswith("admin_no_"))
async def admin_reject_driver(callback_query: CallbackQuery, bot: Bot):
    """–ê–¥–º–∏–Ω —à–æ—Ñ—ë—Ä–Ω–∏ —Ä–∞–¥ —ç—Ç—Å–∞, —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä –±–æ—Ä–∞–¥–∏."""
    message_id = int(callback_query.data.split("_")[-1])  # ‚úÖ –•–∞–±–∞—Ä ID –Ω–∏ –æ–ª–∏—à

    print(f"üîç –ê–¥–º–∏–Ω —Ä–∞–¥ —ç—Ç–≥–∞–Ω —Ö–∞–±–∞—Ä ID: {message_id}")  # ‚úÖ DEBUG

    if message_id not in pending_drivers:
        await callback_query.message.answer("‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫: –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏! –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
        return

    —à–æ—Ñ—ë—Ä_data = pending_drivers.pop(message_id)  # ‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∏—à –≤–∞ cachedan —û—á–∏—Ä–∏—à
    user_id = —à–æ—Ñ—ë—Ä_data.get("telegram_id")  # ‚úÖ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ Telegram ID —Å–∏–Ω–∏ –æ–ª–∏—à

    await callback_query.message.edit_reply_markup(reply_markup=None)  # ‚úÖ –ò–Ω–ª–∞–π–Ω —Ç—É–≥–º–∞–ª–∞—Ä–Ω–∏ —û—á–∏—Ä–∏—à
    await callback_query.message.answer("‚ùå –®–æ—Ñ—ë—Ä –∞—Ä–∏–∑–∞—Å–∏ —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏!")
    await callback_query.message.delete()
    if user_id:
        await bot.send_message(user_id, "‚ùå *–ê–¥–º–∏–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —Ä–∞–¥ —ç—Ç–¥–∏.*", parse_mode="Markdown",
                               reply_markup=main_button())


async def save_driver_to_db(data: dict, callback: CallbackQuery):
    """–®–æ—Ñ—ë—Ä–Ω–∏ –±–∞–∑–∞–≥–∞ —Å–∞“õ–ª–∞—à —Ñ—É–Ω–∫—Ü–∏—è—Å–∏"""

    telegram_id = data.get("telegram_id")  # ‚úÖ Telegram ID –Ω–∏ –æ–ª–∏—à

    if not telegram_id:
        print("‚ùå –•–∞—Ç–æ–ª–∏–∫: Telegram ID —Ç–æ–ø–∏–ª–º–∞–¥–∏!")
        return

    existing_driver = session.execute(
        select(Driver).where(Driver.telegram_id == telegram_id)
    ).scalars().first()

    if existing_driver:
        print(f"‚ùå –•–∞—Ç–æ–ª–∏–∫: –ë—É —à–æ—Ñ—ë—Ä ({telegram_id}) –∞–ª–ª–∞“õ–∞—á–æ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω!")
        return

    print(f"‚úÖ –ë–∞–∑–∞–≥–∞ —Å–∞“õ–ª–∞–Ω–∞—ë—Ç–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä: {data}")

    driver = Driver(
        telegram_id=telegram_id,
        full_name=data.get('full_name', 'No Name'),
        age=int(data.get('age', 0)),
        city=data.get('city', 'No City'),
        town=data.get('town', 'No Town'),
        type_of_car=data.get('type_of_car', 'No Car'),
        tariff=data.get('tariff', 'No Tarif'),
        phone_number=data.get('phone_number', 'No Number'),
        document=data.get('document', 'No Document'),
        tex_passport=data.get('tex_passport', 'No Tex Passport'),
    )

    session.add(driver)
    session.commit()
    print(f"‚úÖ –®–æ—Ñ—ë—Ä ({telegram_id}) –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ “õ—û—à–∏–ª–¥–∏!")


"""
–®–æ—Ñ—ë—Ä
"""

"""–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —è–Ω–≥–∏–ª–∞—à “õ–∏—Å–º–∏"""


def get_edit_driver_keyboard():
    ikb = InlineKeyboardBuilder()
    ikb.button(text="–ò—Å–º–∏–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_full_name")
    ikb.button(text="–Å—à–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_age")
    ikb.button(text="–®–∞“≥–∞—Ä–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_city")
    ikb.button(text="–¢—É–º–∞–Ω–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_town")
    ikb.button(text="–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_type_of_car")
    ikb.button(text="–ú–∞—à–∏–Ω–∞ —Ç–∞—Ä–∏—Ñ–∏–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_type_of_tariff")
    ikb.button(text="–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_phone_number")
    ikb.button(text="“≤—É–∂–∂–∞—Ç–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_document")
    ikb.button(text="–¢–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_tex_passport")
    ikb.adjust(1)
    return ikb.as_markup()


async def update_driver_field(user_id: int, field_name: str, value: str):
    # Ensure user_id is a string for comparison
    user_id_str = str(user_id)
    query = update(Driver).where(Driver.telegram_id == user_id_str).values({field_name: value})
    session.execute(query)
    session.commit()


@driver_router.message(F.text == "üíº –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —è–Ω–≥–∏–ª–∞—à")
async def change_datas(message: Message):
    await message.answer("“ö–∞–π—Å–∏ –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–≥–∏–∑–Ω–∏ –∞–ª–º–∞—à—Ç–∏—Ä–º–æ“õ—á–∏—Å–∏–∑?", reply_markup=get_edit_driver_keyboard())


@driver_router.callback_query(F.data == "edit_full_name")
async def edit_full_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–Ø–Ω–≥–∏ –∏—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: –ê–ª–∏):", reply_markup=cancel_button1(callback))
    await state.set_state(EditDriverState.full_name)
    await callback.answer()


@driver_router.message(EditDriverState.full_name)
async def save_full_name(message: Message, state: FSMContext):
    full_name = message.text
    await update_driver_field(message.from_user.id, "full_name", full_name)

    await message.answer(f"–ò—Å–º–∏–Ω–≥–∏–∑ —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {full_name}", reply_markup=driver_button())
    await state.clear()


@driver_router.callback_query(F.data == "edit_age")
async def edit_age(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–Ø–Ω–≥–∏ —ë—à–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: 21):", reply_markup=cancel_button1(callback))
    await state.set_state(EditDriverState.age)
    await callback.answer()


@driver_router.message(EditDriverState.age)
async def save_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —ë—à–∏–Ω–≥–∏–∑–Ω–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º —Å–∏—Ñ–∞—Ç–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥! (–ú–∞—Å–∞–ª–∞–Ω: 25)",
                             reply_markup=cancel_button(message))
        return
    age = int(message.text)
    await update_driver_field(message.from_user.id, "age", age)

    await message.answer(f"–Å—à–∏–Ω–≥–∏–∑ —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {age}", reply_markup=driver_button())
    await state.clear()


@driver_router.callback_query(F.data == "edit_city")
async def edit_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–Ø–Ω–≥–∏ —à–∞“≥–∞—Ä–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: –ê–Ω–¥–∏–∂–æ–Ω):", reply_markup=cancel_button1(callback))
    await state.set_state(EditDriverState.city)
    await callback.answer()


@driver_router.message(EditDriverState.city)
async def save_city(message: Message, state: FSMContext):
    city = message.text
    await update_driver_field(message.from_user.id, "city", city)

    await message.answer(f"–®–∞“≥–∞—Ä —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {city}", reply_markup=driver_button())
    await state.clear()


@driver_router.callback_query(F.data == "edit_town")
async def edit_town(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–Ø–Ω–≥–∏ —Ç—É–º–∞–Ω–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: –ñ–∞–ª–∞–∫—É–¥—É–∫):", reply_markup=cancel_button1(callback))
    await state.set_state(EditDriverState.town)
    await callback.answer()


@driver_router.message(EditDriverState.town)
async def save_town(message: Message, state: FSMContext):
    town = message.text
    await update_driver_field(message.from_user.id, "town", town)

    await message.answer(f"–¢—É–º–∞–Ω —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {town}", reply_markup=driver_button())
    await state.clear()


@driver_router.callback_query(F.data == "edit_type_of_car")
async def edit_type_of_car(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–Ø–Ω–≥–∏ –º–∞—à–∏–Ω–∞ —Ç—É—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: –ñ–µ–Ω—Ç—Ä–∞):",
                                  reply_markup=cancel_button1(callback))
    await state.set_state(EditDriverState.type_of_car)
    await callback.answer()


@driver_router.message(EditDriverState.type_of_car)
async def save_type_of_car(message: Message, state: FSMContext):
    type_of_car = message.text
    await update_driver_field(message.from_user.id, "type_of_car", type_of_car)

    await message.answer(f"–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏ —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {type_of_car}", reply_markup=driver_button())
    await state.clear()


@driver_router.callback_query(F.data == "edit_type_of_tariff")
async def edit_type_of_car(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üöñ –¢–∞—Ä–∏—Ñ–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:\n"
                                  '''
         –°—Ç–∞–Ω–¥–∞—Ä—Ç —Ç–∞—Ä–∏—Ñ :
         
         –ê–≤—Ç–æ–º–æ–±–∏–ª —Å–∞–ª–æ–Ω–∏–≥–∞ 4 —Ç–∞ 
         –π—É–ª–æ–≤—á–∏ –æ–ª–∏–Ω–∞–¥–∏ 
         
         –ú–∞–Ω–∑–∏–ª–≥–∞ –π–µ—Ç–≥—É–Ω–≥–∞ –∫–∞–¥–∞—Ä —Ç—É—Ö—Ç–∞—à–ª–∞—Ä —Å–æ–Ω–∏ 3 —Ç–∞–¥–∞–Ω –æ—à–º–∞–π–¥–∏
         
         –ê–≤—Ç–æ–º–æ–±–∏–ª–ª–∞—Ä–∏ 1 –≤–∞ 2 –ø–æ–∑–∏—Ü–∏—è –±—É–ª–∞–¥–∏
         
         –ù–∞—Ä—Ö–ª–∞—Ä —É—Ä—Ç–∞—á–∞ –≤–∞ —É–Ω–¥–∞–Ω –∞—Ä–∑–æ–Ω—Ä–æ–∫.
         
         üöñ üöñ üöñ üöñ üöñ üöñ üöñ üöñ üöñ 
         
         –ö–æ–º—Ñ–æ—Ä—Ç —Ç–∞—Ä–∏—Ñ :
         
         –ê–≤—Ç–æ–º–æ–±–∏–ª —Å–∞–ª–æ–Ω–∏–≥–∞ 3 —Ç–∞ 
         –π—É–ª–æ–≤—á–∏ –æ–ª–∏–Ω–∞–¥–∏ 
         
         –ú–∞–Ω–∑–∏–ª–≥–∞ –π–µ—Ç–≥—É–Ω–≥–∞ –∫–∞–¥–∞—Ä —Ç—É—Ö—Ç–∞—à–ª–∞—Ä —Å–æ–Ω–∏ 1 —Ç–∞–¥–∞–Ω –æ—à–º–∞–π–¥–∏ (–π—É–ª–æ–≤—á–∏ —ç—Ö—Ç–∏–π–æ–∂–∏ –±—É–Ω–¥–∞–Ω –º—É—Å—Ç–∞—Å–Ω–æ)
         
         –ê–≤—Ç–æ–º–æ–±–∏–ª–ª–∞—Ä–∏  3 –ø–æ–∑–∏—Ü–∏—è –≤–∞ —É–Ω–¥–∞–Ω —é–∫–æ—Ä–∏ –±—É–ª–∞–¥–∏
         
         –ù–∞—Ä—Ö–ª–∞—Ä —É—Ä—Ç–∞—á–∞ –≤–∞ —É–Ω–¥–∞–Ω —Å–∞–ª –∫–∏–º–º–∞—Ç
         
         –ê–≤—Ç–æ–º–æ–±–∏–ª–ª–∞—Ä–∏ –¥–µ–π–∞—Ä–ª–∏ —Ö–∞–º–º–∞—Å–∏–¥–∞ —Ç–∞–Ω–∏—Ä–æ—Ñ–∫–∞ –º–∞–≤–∂—É–¥, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –¥–æ–∏–º–∏–π –æ–± —Ö–∞–≤–æ–≥–∞ –∫–∞—Ä–∞–±, —Å–∞–ª–æ–Ω–¥–∞ –±–µ–∑ –≥–∞–∑ —Å—É–≤ –¥–æ–∏–º–∏–π —Ç–æ–∑–∞ —Å–∞–ª–æ–Ω.
                                  ''', reply_markup=tariff_button())
    await state.set_state(EditDriverState.tariff)
    await callback.answer()


@driver_router.message(EditDriverState.tariff)
async def save_type_of_car(message: Message, state: FSMContext):
    type_of_tariff = message.text
    await update_driver_field(message.from_user.id, "tariff", type_of_tariff)

    await message.answer(f"–ú–∞—à–∏–Ω–∞ —Ç–∞—Ä–∏—Ñ–∏ —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {type_of_tariff}", reply_markup=driver_button())
    await state.clear()


@driver_router.callback_query(F.data == "edit_phone_number")
async def edit_phone_number(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–Ø–Ω–≥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: 970501655):",
                                  reply_markup=cancel_button1(callback))
    await state.set_state(EditDriverState.phone_number)
    await callback.answer()


@driver_router.message(EditDriverState.phone_number)
async def save_phone_number(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(
            "‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º–ª–∞—Ä–¥–∞–Ω –∏–±–æ—Ä–∞—Ç “õ–∏–ª–∏–± –∫–∏—Ä–∏—Ç–∏–Ω–≥! (–ú–∞—Å–∞–ª–∞–Ω: 970501655)",
            reply_markup=cancel_button(message))
        return
    phone_number = int(message.text)
    await update_driver_field(message.from_user.id, "phone_number", phone_number)

    await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {phone_number}", reply_markup=driver_button())
    await state.clear()


@driver_router.callback_query(F.data == "edit_document")
async def edit_document(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìÑ –Ø–Ω–≥–∏ “≥—É–∂–∂–∞—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=cancel_button1(callback))
    await state.set_state(EditDriverState.document)
    await callback.answer()


@driver_router.message(EditDriverState.document)
async def save_document(message: Message, state: FSMContext):
    if message.photo:
        document = message.photo[-1].file_id
    # elif message.document:
    #     document = message.document.file_id
    else:
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ä–∞—Å–º —é–±–æ—Ä–∏–Ω–≥!", reply_markup=cancel_button(message))
        return

    await update_driver_field(message.from_user.id, "document", document)
    await message.answer("‚úÖ “≤—É–∂–∂–∞—Ç —è–Ω–≥–∏–ª–∞–Ω–¥–∏!", reply_markup=driver_button())


@driver_router.callback_query(F.data == "edit_tex_passport")
async def edit_tex_passport(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìÉ –Ø–Ω–≥–∏ —Ç–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=cancel_button1(callback))
    await state.set_state(EditDriverState.tex_passport)
    await callback.answer()


@driver_router.message(EditDriverState.tex_passport)
async def save_tex_passport(message: Message, state: FSMContext):
    if message.photo:
        tex_passport = message.photo[-1].file_id
    # elif message.document:
    #     tex_passport = message.document.file_id
    else:
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ä–∞—Å–º —é–±–æ—Ä–∏–Ω–≥!", reply_markup=cancel_button(message))
        return

    await update_driver_field(message.from_user.id, "tex_passport", tex_passport)
    await message.answer("‚úÖ –¢–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç —è–Ω–≥–∏–ª–∞–Ω–¥–∏!", reply_markup=driver_button())
    await state.clear()


@driver_router.message(F.text == "üìä –ú–µ–Ω–∏–Ω–≥ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–º")
async def show_driver_info(message: Message):
    """“≤–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ –±–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∞–¥–∏."""

    # 1Ô∏è‚É£ “≤–∞–π–¥–æ–≤—á–∏–Ω–∏ –±–∞–∑–∞–¥–∞–Ω —Ç–æ–ø–∞–º–∏–∑
    driver = session.execute(
        select(Driver).where(Driver.telegram_id == str(message.from_user.id))
    ).scalars().first()

    # 2Ô∏è‚É£ –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏ –±–∞–∑–∞–¥–∞ –±—û–ª–º–∞—Å–∞, —Ö–∞–±–∞—Ä —á–∏“õ–∞—Ä–∞–º–∏–∑
    if not driver:
        await message.answer("‚ö†Ô∏è –°–∏–∑ “≥–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∏–∑! –ê–≤–≤–∞–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–Ω–≥.")
        return

    # 3Ô∏è‚É£ “≤–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ –±–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∞–º–∏–∑
    caption = (
        f"üìã *–°–∏–∑–Ω–∏–Ω–≥ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑:*\n\n"
        f"üë§ *–ò—Å–º:* {driver.full_name}\n"
        f"üóì *–Å—à:* {driver.age}\n"
        f"üèô *–®–∞“≥–∞—Ä:* {driver.city}\n"
        f"üìç *–¢—É–º–∞–Ω:* {driver.town}\n"
        f"üöó *–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏:* {driver.type_of_car}\n"
        f"üòé *–¢–∞—Ä–∏—Ñ —Ç—É—Ä–∏:* {driver.tariff}\n"
        f"üìû *–¢–µ–ª:* {driver.phone_number}\n"
        # f"üî¢ *–ù–∞–≤–±–∞—Ç —Ä–∞“õ–∞–º–∏:* {driver.queue if driver.queue else '–ô—û“õ'}\n"
    )

    await message.answer(caption, parse_mode="Markdown")

    # 4Ô∏è‚É£ –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ “≥—É–∂–∂–∞—Ç–ª–∞—Ä–∏ –±—û–ª—Å–∞, —Ä–∞—Å–º —Å–∏—Ñ–∞—Ç–∏–¥–∞ —é–±–æ—Ä–∞–º–∏–∑
    if driver.document:
        await message.answer_photo(driver.document, caption="üìÑ *–°–∏–∑–Ω–∏–Ω–≥ “≥—É–∂–∂–∞—Ç–∏–Ω–≥–∏–∑ (–ü—Ä–∞–≤–∞)*",
                                   parse_mode="Markdown")

    if driver.tex_passport:
        await message.answer_photo(driver.tex_passport, caption="üìÉ *–°–∏–∑–Ω–∏–Ω–≥ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∏–Ω–≥–∏–∑*",
                                   parse_mode="Markdown")


from datetime import datetime

from datetime import datetime


# Tugma yaratish funksiyasi

# "üîâ –ñ–æ–π–Ω–∏ –±–µ–ª–≥–∏–ª–∞—à" bosilganda tugmalar chiqadi
@driver_router.message(F.text == "üîâ –ñ–æ–π–Ω–∏ –±–µ–ª–≥–∏–ª–∞—à")
async def contact_with_admin(message: Message):
    await message.answer("üìç “≤–æ–∑–∏—Ä–≥–∏ –∂–æ–π–ª–∞—à—É–≤–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=driver_location_button())


# Tugmalardan birini bosganda ma‚Äôlumotlar guruhga yuboriladi
@driver_router.message(F.text.in_(["–ê–Ω–¥–∏–∂–æ–Ω–¥–∞–º–∞–Ω", "–¢–æ—à–∫–µ–Ω—Ç–¥–∞–º–∞–Ω"]))
async def send_driver_info(message: Message, bot: Bot):
    # Foydalanuvchi ma'lumotlarini bazadan olish
    query = select(Driver).where(Driver.telegram_id == str(message.from_user.id))
    driver = session.execute(query).scalars().first()

    if not driver:
        await message.answer("‚ùå –°–∏–∑ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∏–∑!")
        return

    # Hozirgi vaqtni olish
    now = datetime.now().strftime("%H:%M:%S")

    # Haydovchi ma'lumotlari
    location = message.text  # Foydalanuvchi tanlagan joy
    text = (
        f"üöñ –Ø–Ω–≥–∏ –ª–æ–∫–∞—Ç—Å–∏—è\n\n"
        f"üë§ “≤–∞–π–¥–æ–≤—á–∏: {driver.full_name}\n"
        f"üïí –í–∞“õ—Ç: {now}\n"
        f"üöò –ú–∞—à–∏–Ω–∞: {driver.type_of_car} \n"
        f"üìû –ù–æ–º–µ—Ä–∏:({driver.phone_number})\n"
        f"üìç –ñ–æ–π–ª–∞—à—É–≤: {location}"
    )

    # Haydovchiga javob yuborish
    # shopirlar = -1002630555042 #shopurlar

    if location == "–ê–Ω–¥–∏–∂–æ–Ω–¥–∞–º–∞–Ω":
        GROUP_ID = -1002540963651  # toshkent shopirlar
        await bot.send_message(GROUP_ID, text)
        await message.answer("‚úÖ –õ–æ–∫–∞—Ç—Å–∏—è —é–±–æ—Ä–∏–ª–¥–∏!")
    if location == "–¢–æ—à–∫–µ–Ω—Ç–¥–∞–º–∞–Ω":
        GROUP_ID1 = -1002673628832  # adnijon shopirlar

        await bot.send_message(GROUP_ID1, text)
        await message.answer("‚úÖ –õ–æ–∫–∞—Ç—Å–∏—è —é–±–æ—Ä–∏–ª–¥–∏!")


@driver_router.message(F.text == '–†–µ–∫–ª–∞–º–∞ üîä', IsAdmin())
async def start_advertisement(message: Message, state: FSMContext):
    await message.answer("üì∏ –†–µ–∫–ª–∞–º–∞ —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥!")
    await state.set_state(AdminState.photo)


# üìå **–†–µ–∫–ª–∞–º–∞ —É—á—É–Ω —Ä–∞—Å–º —é–∫–ª–∞—à**
@driver_router.message(AdminState.photo, IsAdmin(), F.photo)
async def capture_ad_photo(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    await state.set_state(AdminState.title)
    await message.answer("üìù –†–µ–∫–ª–∞–º–∞ “≥–∞“õ–∏–¥–∞ —Ç—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç –∫–∏—Ä–∏—Ç–∏–Ω–≥!")


# üìå **–†–µ–∫–ª–∞–º–∞ –º–∞—Ç–Ω–∏–Ω–∏ “õ–∞–±—É–ª “õ–∏–ª–∏—à –≤–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–≥–∞ —é–±–æ—Ä–∏—à**
@driver_router.message(AdminState.title, IsAdmin(), ~F.photo)
async def send_advertisement(message: Message, state: FSMContext):
    title = message.text
    data = await state.get_data()
    await state.clear()

    users = session.query(User).filter(User.user_id.isnot(None)).all()

    if not users:
        await message.answer("üö´ “≤–µ—á –∫–∏–º–≥–∞ —Ä–µ–∫–ª–∞–º–∞ —é–±–æ—Ä–∏–ª–º–∞–¥–∏. –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")
        return

    tasks = []
    deleted_users = []

    for user in users:
        if user.user_id:
            try:
                # ‚úÖ **–†–µ–∫–ª–∞–º–∞ —é–±–æ—Ä–∏—à**
                tasks.append(message.bot.send_photo(
                    chat_id=user.user_id,
                    photo=data['photo'],
                    caption=title
                ))

            except aiogram.exceptions.TelegramForbiddenError:
                print(f'üö´ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {user.user_id} –±–æ—Ç–Ω–∏ –±–ª–æ–∫–ª–∞–≥–∞–Ω —ë–∫–∏ –≥—É—Ä—É“≥–¥–∞–Ω —á–∏“õ–∏–± –∫–µ—Ç–≥–∞–Ω.')
                deleted_users.append(user.user_id)

            except aiogram.exceptions.TelegramBadRequest as e:
                if "chat not found" in str(e):
                    print(f'üö´ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {user.user_id} —Ç–æ–ø–∏–ª–º–∞–¥–∏. –é—á–∏—Ä–∏—à–≥–∞ —Ç–∞–π—ë—Ä–ª–∞–Ω–º–æ“õ–¥–∞.')
                    deleted_users.append(user.user_id)
                else:
                    print(f'‚ùå {user.user_id} –≥–∞ —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}')

    # ‚úÖ **–ë–ª–æ–∫–ª–∞–≥–∞–Ω —ë–∫–∏ —Ç–æ–ø–∏–ª–º–∞–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–Ω–∏ –±–∞–∑–∞–¥–∞–Ω —û—á–∏—Ä–∏—à**
    if deleted_users:
        session.query(User).filter(User.user_id.in_(deleted_users)).delete(synchronize_session=False)
        session.commit()
        print(f"üóëÔ∏è {len(deleted_users)} —Ç–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–∞–∑–∞–¥–∞–Ω —û—á–∏—Ä–∏–ª–¥–∏.")

    if tasks:
        await asyncio.gather(*tasks)

    await message.answer("‚úÖ –†–µ–∫–ª–∞–º–∞ –±–∞—Ä—á–∞ –∞–∫—Ç–∏–≤ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏!", reply_markup=admin_button())


# üîπ **Admin Paneli**
# KeyboardButton(text="–ê -> –¢ –®–æ–ø–∏—Ä–ª–∞—Ä"),
# KeyboardButton(text="–¢ -> –ê –®–æ–ø–∏—Ä–ª–∞—Ä"),
# tarif qoshib , Joylashuvni guruhga yuborib turish
# @driver_router.message(F.text == "üîÖ –ê -> –¢ –®–æ–ø–∏—Ä–ª–∞—Ä", IsAdmin())
# async def admin_panel1(message: Message):
#     """–ë—É–≥—É–Ω–≥–∏ –ê–Ω–¥–∏–∂–æ–Ω–¥–∞–Ω –¢–æ—à–∫–µ–Ω—Ç–≥–∞ –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω —à–æ—Ñ–µ—Ä–ª–∞—Ä–Ω–∏ —á–∏“õ–∞—Ä–∞–¥–∏"""
#     drivers = session.query(Driver).filter(
#         Driver.route == "–ê–Ω–¥–∏–∂–æ–Ω -> –¢–æ—à–∫–µ–Ω—Ç",
#         Driver.date_added >= datetime.now().date()
#     ).order_by(Driver.queue).all()
#
#     if not drivers:
#         await message.answer("üöñ –ë—É–≥—É–Ω –ê–Ω–¥–∏–∂–æ–Ω–¥–∞–Ω –¢–æ—à–∫–µ–Ω—Ç–≥–∞ –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω —à–æ—Ñ—ë—Ä–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")
#         return
#
#     response = "üöñ *–ê–Ω–¥–∏–∂–æ–Ω -> –¢–æ—à–∫–µ–Ω—Ç —à–æ—Ñ—ë—Ä–ª–∞—Ä–∏*\n\n"
#     for driver in drivers:
#         response += f"üèô *–¢–∞—Ä—Ç–∏–± —Ä–∞–∫–∞–º–∏:* {driver.queue}\n"
#         response += f"üèô *–ò—Å–º–∏:* {driver.full_name}\n"
#         response += f"üèô *–¢—É–º–∞–Ω:* {driver.town}\n"
#         response += f"‚è∞ *–ö–µ—Ç–∏—à –≤–∞“õ—Ç–∏:* {driver.delivery_time}\n"
#         response += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {driver.phone_number}\n"
#         response += "---------------------\n"
#
#     await message.answer(response, parse_mode="Markdown")
#
#
# @driver_router.message(F.text == "üîÖ –¢ -> –ê –®–æ–ø–∏—Ä–ª–∞—Ä", IsAdmin())
# async def admin_panel(message: Message):
#     """–ë—É–≥—É–Ω–≥–∏ –¢–æ—à–∫–µ–Ω—Ç–¥–∞–Ω –ê–Ω–¥–∏–∂–æ–Ω–≥–∞ –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω —à–æ—Ñ–µ—Ä–ª–∞—Ä–Ω–∏ —á–∏“õ–∞—Ä–∞–¥–∏"""
#     drivers = session.query(Driver).filter(
#         Driver.route == "–¢–æ—à–∫–µ–Ω—Ç -> –ê–Ω–¥–∏–∂–æ–Ω",
#         Driver.date_added >= datetime.now().date()
#     ).order_by(Driver.queue).all()
#
#     if not drivers:
#         await message.answer("üöñ –ë—É–≥—É–Ω –¢–æ—à–∫–µ–Ω—Ç–¥–∞–Ω –ê–Ω–¥–∏–∂–æ–Ω–≥–∞ –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω —à–æ—Ñ—ë—Ä–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")
#         return
#
#     response = "üöñ *–¢–æ—à–∫–µ–Ω—Ç -> –ê–Ω–¥–∏–∂–æ–Ω —à–æ—Ñ—ë—Ä–ª–∞—Ä–∏*\n\n"
#     for driver in drivers:
#         response += f"üèô *–¢–∞—Ä—Ç–∏–± —Ä–∞–∫–∞–º–∏:* {driver.queue}\n"
#         response += f"üèô *–ò—Å–º–∏:* {driver.full_name}\n"
#         response += f"üèô *–¢—É–º–∞–Ω:* {driver.town}\n"
#         response += f"‚è∞ *–ö–µ—Ç–∏—à –≤–∞“õ—Ç–∏:* {driver.delivery_time}\n"
#         response += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {driver.phone_number}\n"
#         response += "---------------------\n"
#
#     await message.answer(response, parse_mode="Markdown")


@driver_router.message(F.text == "–ê–¥–º–∏–Ω –ë—û–ª–∏–º–∏")
async def admin_panel(message: Message):
    link = 'http://localhost:8050'
    await message.answer(text=f'üîó –ê–¥–º–∏–Ω –ë—û–ª–∏–º–∏–≥–∞ —û—Ç–∏—à: {link}')


async def driver() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)

    asyncio.run(driver())
