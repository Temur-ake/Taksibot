from datetime import datetime

from aiogram import Bot, Router, F
from aiogram.filters import Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, KeyboardButton,  InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from sqlalchemy import update, select, func

from keyboards import main_button, cancel_button, delivery_button, driver_button, confirm_button, \
    cancel_button1, client_button, admin_button, tariff_button, quantity_button
from models import session, Driver
from state import Delivery, Client, DriverState, EditDriverState, OrderState

inform_router = Router()

# üìå Define groups
GROUP_ANDIJON = -1002560104017  # Buyurtma A -> T gruppa
GROUP_TASHKENT = -1002462270850  # Buyurtma T -> A gruppa
# shopirlar = -1002630555042 #shopurlar
# GROUP_ID = -1002673628832  # toshkent shopirlar
# GROUP_ID1 = -1002540963651 #adnijon shopirlar
admin_chat_id = [7914466408]
pending_drivers = {}

ROUTES = ["–ê–Ω–¥–∏–∂–æ–Ω -> –¢–æ—à–∫–µ–Ω—Ç", "–¢–æ—à–∫–µ–Ω—Ç -> –ê–Ω–¥–∏–∂–æ–Ω"]
ROUTES1 = ["–ê–Ω–¥–∏–∂–æ–Ω => –¢–æ—à–∫–µ–Ω—Ç", "–¢–æ—à–∫–µ–Ω—Ç => –ê–Ω–¥–∏–∂–æ–Ω"]

ANDIJON_TOWNS = [
    "–ê–Ω–¥–∏–∂–æ–Ω —à–∞“≥–∞—Ä", "–û–ª—Ç–∏–Ω–∫—û–ª", "–ê—Å–∞–∫–∞", "–ë–∞–ª–∏“õ—á–∏", "–ë—É–ª–æ“õ–±–æ—à–∏", "–ö—É–π–≥–∞–Ω—ë—Ä",
    "–ë—û—Å—Ç–æ–Ω", "–ò–∑–±–æ—Å–∫–∞–Ω", "–ñ–∞–ª–∞“õ—É–¥—É“õ", "–ú–∞—Ä“≥–∞–º–∞—Ç", "–ü–∞—Ö—Ç–∞–æ–±–æ–¥", "–ü–æ–π—Ç—É“ì",
    "–•—û–∂–∞–æ–±–æ–¥", "–®–∞“≥—Ä–∏—Ö–æ–Ω", "–£–ª—É“ì–Ω–æ—Ä", "–•–æ–Ω–æ–±–æ–¥", "“ö–æ—Ä–∞—Å—É–≤", "“ö—û—Ä“ì–æ–Ω—Ç–µ–ø–∞"
]

TASHKENT_TOWNS = [
    "–ë–µ–∫—Ç–µ–º–∏—Ä", "–ß–∏–ª–æ–Ω–∑–æ—Ä", "–ú–∏—Ä–æ–±–æ–¥", "–ú–∏—Ä–∑–æ –£–ª—É“ì–±–µ–∫", "–û–ª–º–∞–∑–æ—Ä",
    "–°–µ—Ä–≥–µ–ª–∏", "–®–∞–π—Ö–æ–Ω—Ç–æ—Ö—É—Ä", "–£—á—Ç–µ–ø–∞", "–Ø–∫–∫–∞—Å–∞—Ä–æ–π", "–Ø—à–Ω–∞–æ–±–æ–¥", "–Æ–Ω—É—Å–æ–±–æ–¥"
]


def confirm_button1(message_id: int):
    """–ê–¥–º–∏–Ω —É—á—É–Ω —Ç–∞—Å–¥–∏“õ–ª–∞—à —Ç—É–≥–º–∞–ª–∞—Ä–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ “≤–∞", callback_data=f"admin_yes_{message_id}"),
                InlineKeyboardButton(text="‚ùå –ô—û“õ", callback_data=f"admin_no_{message_id}"),
            ]
        ]
    )
    return keyboard


def get_route_keyboard():
    """üöó Haydovchi yo‚Äònalishini tanlash uchun tugmalar"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=route, callback_data=f"route_{route}")] for route in ROUTES
        ]
    )
    return keyboard


class IsAdmin(Filter):
    def __init__(self, *args, **kwargs) -> None:
        pass

    async def __call__(self, message: Message, bot: Bot) -> bool:
        return message.from_user.id in admin_chat_id


def format_route(route: str) -> str:
    from_city, to_city = route.split(" -> ")
    return f"{from_city}–¥–∞–Ω {to_city}–≥–∞"


@inform_router.message(F.text == "–û—Ä—Ç–≥–∞")
async def back(message: Message):
    await message.answer('–¢–∞–Ω–ª–∞–Ω–≥ :', reply_markup=main_button())


@inform_router.message(F.text == "–ë–µ–∫–æ—Ä –∫–∏–ª–∏—à")
async def back(message: Message, state: FSMContext):
    if state:
        await state.clear()
    await message.answer('–ë–µ–∫–æ—Ä –∫–∏–ª–∏–Ω–¥–∏ ‚úÖ', reply_markup=main_button())


# üìå **Dynamic town selection based on route**
def town_button(route: str):
    """Generate dynamic town selection buttons based on the chosen route."""
    rkb = ReplyKeyboardBuilder()
    if "-> –¢–æ—à–∫–µ–Ω—Ç" in route or "=> –¢–æ—à–∫–µ–Ω—Ç" in route:
        towns = ANDIJON_TOWNS
    if "-> –ê–Ω–¥–∏–∂–æ–Ω" in route or "=> –ê–Ω–¥–∏–∂–æ–Ω" in route:
        towns = TASHKENT_TOWNS

    for town in towns:
        rkb.add(KeyboardButton(text=town))
    rkb.add(KeyboardButton(text="–ë–µ–∫–æ—Ä –∫–∏–ª–∏—à"))  # Back button
    rkb.adjust(3, 3)
    return rkb.as_markup(resize_keyboard=True)


async def process_order(message: Message, state: FSMContext, bot: Bot, is_pochta=False):
    """üì¶ –ü–æ—á—Ç–∞ —ë–∫–∏ –∫–ª–∏–µ–Ω—Ç –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏–Ω–∏ “≥–∞–π–¥–æ–≤—á–∏–ª–∞—Ä–≥–∞ —Ç–∞“õ—Å–∏–º–ª–∞—à"""
    data = await state.get_data()
    route = data.get("route")
    town = data.get("town")
    user_count = data.get("client_count")
    user_message = data.get("user_message")
    delivery_time = str(data.get("hour"))
    phone_number = message.text if "phone_number" not in data else data.get("phone_number")
    username = message.from_user.username or "-"
    tariff = data.get("tariff", "–ü–æ—á—Ç–∞")

    # order_type = "üì¶ –ü–æ—á—Ç–∞" if is_pochta else "üßç –ö–ª–∏–µ–Ω—Ç"
    if is_pochta:
        client_info = (
            f"üõ£ –ô—û–Ω–∞–ª–∏—à: {route}\nüèô –¢—É–º–∞–Ω: {town}\nüìã –ú–∞–ª—É–º–æ—Ç: {user_message}\n"
            f"‚è∞ –í–∞“õ—Ç: {delivery_time}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
            f"üë§ –¢–µ–ª–µ–≥—Ä–∞–º: @{username}\n"
        )
    if not is_pochta:
        client_info = (
            f"üõ£ –ô—û–Ω–∞–ª–∏—à: {route}\nüèô –¢—É–º–∞–Ω: {town}\nüìã –û–¥–∞–º —Å–æ–Ω–∏: {user_count}\n"
            f"‚è∞ –í–∞“õ—Ç: {delivery_time}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
            f"üë§ –¢–µ–ª–µ–≥—Ä–∞–º: @{username}\n"
        )

    # üìå Send to the correct group based on the **route**
    if route in ["–ê–Ω–¥–∏–∂–æ–Ω -> –¢–æ—à–∫–µ–Ω—Ç", "–ê–Ω–¥–∏–∂–æ–Ω => –¢–æ—à–∫–µ–Ω—Ç"]:
        await bot.send_message(GROUP_ANDIJON, f"üöï {tariff}  –±—É—é—Ä—Ç–º–∞!\n{client_info}")

    elif route in ["–¢–æ—à–∫–µ–Ω—Ç -> –ê–Ω–¥–∏–∂–æ–Ω", "–¢–æ—à–∫–µ–Ω—Ç => –ê–Ω–¥–∏–∂–æ–Ω"]:
        await bot.send_message(GROUP_TASHKENT, f"üöï {tariff}  –±—É—é—Ä—Ç–º–∞!\n{client_info}")

    await message.answer("‚úÖ C–∏–∑–Ω–∏–Ω–≥ –±—É—é—Ä—Ç–º–∞–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. –¢–µ–∑ –æ—Ä–∞–¥–∞ —Å–∏–∑ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∞–º–∏–∑!",
                         reply_markup=main_button())
    await state.clear()


# üì¶ **Pochta buyurtmalari**
@inform_router.message(F.text == "–ü–æ—á—Ç–∞ –±–æ—Ä")
async def start_pochta(message: Message):
    await message.answer("üöñ –ô—û–Ω–∞–ª–∏—à–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=delivery_button(message))


@inform_router.message(F.text.in_(ROUTES1))
async def route_pochta(message: Message, state: FSMContext):
    await state.update_data(route=message.text)
    await message.answer("üöñ –ü–æ—á—Ç–∞–Ω–∏ “õ–∞–µ—Ä–¥–∞–Ω –æ–ª–∞–º–∏–∑:\n\n –¢—É–º–∞–Ω–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ –π–æ–∫–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:",
                         reply_markup=town_button(message.text))
    await state.set_state(Delivery.town)


@inform_router.message(Delivery.town)
async def capture_pochta_town(message: Message, state: FSMContext):
    await state.update_data(town=message.text)
    await message.answer("‚úâÔ∏è –ò–ª—Ç–∏–º–æ—Å –±—É—é—Ä—Ç–º–∞ —Ö–∞“õ–∏–¥–∞ –±–∏—Ä–æ–∑ –º–∞–ª—É–º–æ—Ç –±–µ—Ä–∏–Ω–≥!\n\n"

                         "–ú–∏—Å–æ–ª —É—á—É–Ω: –ê–Ω–¥–∏–∂–æ–Ω–¥–∞–Ω –Ø–∫–∫–∞—Å–∞—Ä–æ–π–≥–∞ –ë–∏—Ç—Ç–∞ —Å—É–º–∫–∞–¥–∞ –∫–∏–π–∏–º–ª–∞—Ä –±–æ—Ä,\n–í–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∏ –æ–ª–∏–± –∫–µ—Ç–∏—à –∫–µ—Ä–∞–∫, –ò–ª—Ç–∏–º–æ—Å —Ñ–∞“õ–∞—Ç —Ç–æ–º–∏–¥–∞ \n–±–∞–≥–∞–∂–∏ –±–æ—Ä–ª–∞—Ä –∞–ª–æ“õ–∞–≥–∞ —á–∏“õ—Å–∏–Ω",
                         reply_markup=cancel_button(message))
    await state.set_state(Delivery.delivery)


@inform_router.message(Delivery.delivery)
async def capture_pochta_message(message: Message, state: FSMContext):
    await state.update_data(user_message=message.text)
    await message.answer("‚è∞ –ù–µ—á–∏–¥–∞ —á–∏–∫–∞—Ä–∏–± —é–±–æ—Ä–∏—à –∫–µ—Ä–∞–∫? –ú–∞—Å–∞–ª–∞–Ω: 19:00", reply_markup=cancel_button(message))
    await state.set_state(Delivery.hour)


@inform_router.message(Delivery.hour)
async def capture_pochta_hour(message: Message, state: FSMContext):
    try:
        delivery_time = datetime.strptime(message.text.strip(), "%H:%M").time()
        await state.update_data(hour=delivery_time)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ —ë–∑–∏–Ω–≥! –ú–∞—Å–∞–ª–∞–Ω: 15:30", reply_markup=cancel_button(message))
        return

    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥: –ú–∞—Å–∞–ª–∞–Ω: 970501655", reply_markup=cancel_button(message))
    await state.set_state(Delivery.phone_number)


@inform_router.message(Delivery.phone_number)
async def capture_pochta_phone(message: Message, state: FSMContext, bot: Bot):
    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º–ª–∞—Ä–¥–∞–Ω –∏–±–æ—Ä–∞—Ç –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫!",
                             reply_markup=cancel_button(message))
        return

    await state.update_data(phone_number=message.text)
    await process_order(message, state, bot, is_pochta=True)


# üßç **Klient buyurtmalari**
@inform_router.message(F.text == "–ö–ª–∏–µ–Ω—Ç")
async def start_client(message: Message):
    await message.answer("üöñ –ô—û–Ω–∞–ª–∏—à–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:", reply_markup=client_button(message))


@inform_router.message(F.text.in_(ROUTES))
async def start_client_route(message: Message, state: FSMContext):
    await state.update_data(route=message.text)
    await message.answer("üöñ –°–∏–∑–Ω–∏ “õ–∞–µ—Ä–¥–∞–Ω –æ–ª–∞–º–∏–∑:\n\n –¢—É–º–∞–Ω–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ –π–æ–∫–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:",
                         reply_markup=town_button(message.text))
    await state.set_state(Client.town)


@inform_router.message(Client.town)
async def capture_client_town(message: Message, state: FSMContext):
    await state.update_data(town=message.text)
    await message.answer("üë• –û–¥–∞–º —Å–æ–Ω–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ –π–æ–∫–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:", reply_markup=quantity_button())
    await state.set_state(Client.client_count)  # ‚úÖ State to'g'rilandi


@inform_router.message(Client.client_count)
async def capture_client_count(message: Message, state: FSMContext):
    await state.update_data(client_count=int(message.text))

    await message.answer("‚è∞ –ù–µ—á–∏–¥–∞ –π–æ–ª–≥–∞ —á–∏–∫–∏—à–∏–Ω–≥–∏–∑ –∫–µ—Ä–∞–∫? –ú–∞—Å–∞–ª–∞–Ω: 19:00", reply_markup=cancel_button(message))
    await state.set_state(Client.hour)


@inform_router.message(Client.hour)
async def capture_client_hour(message: Message, state: FSMContext):
    try:
        delivery_time = datetime.strptime(message.text.strip(), "%H:%M").time()
        await state.update_data(hour=delivery_time)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ —ë–∑–∏–Ω–≥! –ú–∞—Å–∞–ª–∞–Ω: 15:30", reply_markup=cancel_button(message))
        return

    # üîπ TARIF tanlash tugmalari
    await message.answer("üöñ –¢–∞—Ä–∏—Ñ–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:\n"
                         '''
–°—Ç–∞–Ω–¥–∞—Ä—Ç —Ç–∞—Ä–∏—Ñ :

–ê–≤—Ç–æ–º–æ–±–∏–ª —Å–∞–ª–æ–Ω–∏–≥–∞ 4 —Ç–∞ 
–π—É–ª–æ–≤—á–∏ –æ–ª–∏–Ω–∞–¥–∏ 

–ú–∞–Ω–∑–∏–ª–≥–∞ –π–µ—Ç–≥—É–Ω–≥–∞ –∫–∞–¥–∞—Ä —Ç—É—Ö—Ç–∞—à–ª–∞—Ä —Å–æ–Ω–∏ 3 —Ç–∞–¥–∞–Ω –æ—à–º–∞–π–¥–∏

–ê–≤—Ç–æ–º–æ–±–∏–ª–ª–∞—Ä–∏ 1 –≤–∞ 2 –ø–æ–∑–∏—Ü–∏—è –±—É–ª–∞–¥–∏

–ù–∞—Ä—Ö–ª–∞—Ä —É—Ä—Ç–∞—á–∞ –≤–∞ —É–Ω–¥–∞–Ω –∞—Ä–∑–æ–Ω—Ä–æ–∫.

üöñ üöñ üöñ üöñ üöñ üöñ üöñ üöñ üöñ 

–ö–æ–º—Ñ–æ—Ä—Ç —Ç–∞—Ä–∏—Ñ :

–ê–≤—Ç–æ–º–æ–±–∏–ª —Å–∞–ª–æ–Ω–∏–≥–∞ 3 —Ç–∞ 
–π—É–ª–æ–≤—á–∏ –æ–ª–∏–Ω–∞–¥–∏ 

–ú–∞–Ω–∑–∏–ª–≥–∞ –π–µ—Ç–≥—É–Ω–≥–∞ –∫–∞–¥–∞—Ä —Ç—É—Ö—Ç–∞—à–ª–∞—Ä —Å–æ–Ω–∏ 1 —Ç–∞–¥–∞–Ω –æ—à–º–∞–π–¥–∏ (–π—É–ª–æ–≤—á–∏ —ç—Ö—Ç–∏–π–æ–∂–∏ –±—É–Ω–¥–∞–Ω –º—É—Å—Ç–∞—Å–Ω–æ)

–ê–≤—Ç–æ–º–æ–±–∏–ª–ª–∞—Ä–∏  3 –ø–æ–∑–∏—Ü–∏—è –≤–∞ —É–Ω–¥–∞–Ω —é–∫–æ—Ä–∏ –±—É–ª–∞–¥–∏

–ù–∞—Ä—Ö–ª–∞—Ä —É—Ä—Ç–∞—á–∞ –≤–∞ —É–Ω–¥–∞–Ω —Å–∞–ª –∫–∏–º–º–∞—Ç

–ê–≤—Ç–æ–º–æ–±–∏–ª–ª–∞—Ä–∏ –¥–µ–π–∞—Ä–ª–∏ —Ö–∞–º–º–∞—Å–∏–¥–∞ —Ç–∞–Ω–∏—Ä–æ—Ñ–∫–∞ –º–∞–≤–∂—É–¥, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –¥–æ–∏–º–∏–π –æ–± —Ö–∞–≤–æ–≥–∞ –∫–∞—Ä–∞–±, —Å–∞–ª–æ–Ω–¥–∞ –±–µ–∑ –≥–∞–∑ —Å—É–≤ –¥–æ–∏–º–∏–π —Ç–æ–∑–∞ —Å–∞–ª–æ–Ω.
                         ''', reply_markup=tariff_button())
    await state.set_state(Client.tariff)


@inform_router.message(Client.tariff)
async def client_tariff(message: Message, state: FSMContext):
    if message.text not in ["–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ö–æ–º—Ñ–æ—Ä—Ç"]:
        await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç–∞—Ä–∏—Ñ–Ω–∏ —Ç—û“ì—Ä–∏ —Ç–∞–Ω–ª–∞–Ω–≥!", reply_markup=tariff_button())
        return

    await state.update_data(tariff=message.text)
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥: –ú–∞—Å–∞–ª–∞–Ω: 970501655", reply_markup=cancel_button(message))
    await state.set_state(Client.phone_number)


@inform_router.message(Client.phone_number)
async def client_phone(message: Message, state: FSMContext, bot: Bot):
    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º–ª–∞—Ä–¥–∞–Ω –∏–±–æ—Ä–∞—Ç –±—û–ª–∏—à–∏ –∫–µ—Ä–∞–∫!",
                             reply_markup=cancel_button(message))
        return

    await state.update_data(phone_number=message.text)
    await process_order(message, state, bot, is_pochta=False)


@inform_router.message(F.text == "–û–ø–µ—Ä–∞—Ç–æ—Ä –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à")
async def call_center(message: Message):
    await message.answer("–ë–∏–∑ –±–∏–ª–∞–Ω –±–æ–≥–ª–∞–Ω–∏—à —É—á—É–Ω:\n\n+998552010255\n\n@VPEXadmin")


# @inform_router.message(F.text == "–®–æ—Ñ—ë—Ä")
# async def start_shofer(message: Message, state: FSMContext):
#     """–ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏ –±–∞–∑–∞–¥–∞ –º–∞–≤–∂—É–¥ –±—û–ª—Å–∞, –º–µ–Ω—é–Ω–∏ –∫—û—Ä—Å–∞—Ç–∞–¥–∏. –ê–∫—Å “≥–æ–ª–¥–∞, —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–∫–∞–∑–∏—à –±–æ—à–ª–∞–Ω–∞–¥–∏."""
#     query = select(Driver).where(Driver.telegram_id == str(message.from_user.id))
#     driver = session.execute(query).scalars().first()
#
#     if driver:
#         await message.answer("–¢–∞–Ω–ª–∞–Ω–≥:", reply_markup=driver_button())
#
#     else:
#         await message.answer(
#             "üìù –ò—Å–º-—à–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: –ë–æ—Ç–∏—Ä –ö–æ–¥–∏—Ä–æ–≤ :", reply_markup=cancel_button(message)
#         )
#         await state.set_state(DriverState.full_name)
#
#
# @inform_router.message(DriverState.full_name)
# async def capture_driver_fullname(message: Message, state: FSMContext):
#     """–ò—Å–º-—à–∞—Ä–∏—Ñ–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
#     await state.update_data(full_name=message.text)
#     await message.answer("üìÜ –Å—à–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: 25 :", reply_markup=cancel_button(message))
#     await state.set_state(DriverState.age)
#
#
# @inform_router.message(DriverState.age)
# async def capture_driver_age(message: Message, state: FSMContext):
#     """–Å—à–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∞–¥–∏."""
#     if not message.text.isdigit():  # üîç –§–∞“õ–∞—Ç —Å–æ–Ω –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
#         await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —ë—à–∏–Ω–≥–∏–∑–Ω–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º —Å–∏—Ñ–∞—Ç–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥! (–ú–∞—Å–∞–ª–∞–Ω: 25)",
#                              reply_markup=cancel_button(message))
#         return  # ‚ùå –ê–≥–∞—Ä –Ω–æ—Ç—û“ì—Ä–∏ –±—û–ª—Å–∞, —Ñ—É–Ω–∫—Ü–∏—è–Ω–∏ —Ç—É–≥–∞—Ç–∞–º–∏–∑
#
#     await state.update_data(age=int(message.text))  # ‚úÖ –¢—û“ì—Ä–∏ —ë—à–Ω–∏ —Å–∞“õ–ª–∞—à
#     await message.answer("üìç –í–∏–ª–æ—è—Ç–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: –ê–Ω–¥–∏–∂–æ–Ω tyoki :", reply_markup=cancel_button(message))
#     await state.set_state(DriverState.city)
#
#
# # registratsiyadan keyin malumoti rasmsiz va andijondan yoki toshkentdaman deb tugmani ezishiga grurhga tashab qoyadi
# # tarifni tanlaydi nomerdan oldin
# @inform_router.message(DriverState.city)
# async def capture_driver_city(message: Message, state: FSMContext):
#     """–®–∞“≥–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
#     await state.update_data(city=message.text)
#     await message.answer("üè¢ –¢—É–º–∞–Ω–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: –•–æ–∂–∞–æ–±–æ–¥ :", reply_markup=cancel_button(message))
#     await state.set_state(DriverState.town)
#
#
# @inform_router.message(DriverState.town)
# async def capture_driver_town(message: Message, state: FSMContext):
#     """–¢—É–º–∞–Ω –Ω–æ–º–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
#     await state.update_data(town=message.text)
#     await message.answer("üöó –ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: –ö–æ–±–∞–ª—Ç :", reply_markup=cancel_button(message))
#     await state.set_state(DriverState.type_of_car)
#
#
# @inform_router.message(DriverState.type_of_car)
# async def capture_driver_car_type(message: Message, state: FSMContext):
#     """–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
#     await state.update_data(type_of_car=message.text)
#     await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ \n\n–ú–∞—Å–∞–ª–∞–Ω: 970501655 :",
#                          reply_markup=cancel_button(message))
#     await state.set_state(DriverState.phone_number)
#
#
# @inform_router.message(DriverState.phone_number)
# async def capture_driver_phone_number(message: Message, state: FSMContext):
#     if not message.text.isdigit():  # üîç –§–∞“õ–∞—Ç —Å–æ–Ω –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à
#         await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º —Å–∏—Ñ–∞—Ç–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥! (–ú–∞—Å–∞–ª–∞–Ω: 970501655)",
#                              reply_markup=cancel_button(message))
#         return  # ‚ùå –ê–≥–∞—Ä –Ω–æ—Ç—û“ì—Ä–∏ –±—û–ª—Å–∞, —Ñ—É–Ω–∫—Ü–∏—è–Ω–∏ —Ç—É–≥–∞—Ç–∞–º–∏–∑
#     """–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
#     await state.update_data(phone_number=int(message.text))
#     await message.answer("üìÑ –ü—Ä–∞–≤–∞–Ω–≥–∏–∑–Ω–∏ —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ :", reply_markup=cancel_button(message))
#     await state.set_state(DriverState.document)
#
#
# @inform_router.message(DriverState.document)
# async def capture_driver_document(message: Message, state: FSMContext):
#     """“≤—É–∂–∂–∞—Ç —Ä–∞—Å–º–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏ –≤–∞ –∫–µ–π–∏–Ω–≥–∏ “õ–∞–¥–∞–º–≥–∞ —û—Ç–∞–¥–∏."""
#     if message.photo:
#         await state.update_data(document=message.photo[-1].file_id)
#         await message.answer("üìÉ –¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥ :", reply_markup=cancel_button(message))
#         await state.set_state(DriverState.tex_passport)
#     else:
#         await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, “≥—É–∂–∂–∞—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥!")
#
#
# @inform_router.message(DriverState.tex_passport)
# async def capture_driver_tex_passport(message: Message, state: FSMContext):
#     """–¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —Å–∞“õ–ª–∞–π–¥–∏, –±–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —á–∏“õ–∞—Ä–∞–¥–∏ –≤–∞ —Ç–∞—Å–¥–∏“õ–ª–∞—à —Å—û—Ä–∞–π–¥–∏."""
#
#     if not message.photo:
#         await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥!", reply_markup=cancel_button(message))
#         return
#
#     # ‚úÖ **–¢–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —Å–∞“õ–ª–∞—à**
#     await state.update_data(tex_passport=message.photo[-1].file_id)
#
#     # üîç **State –¥–∞–≥–∏ –±–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∏—à**
#     data = await state.get_data()
#
#     # üìã **“≤–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ –∫–∏—Ä–∏—Ç–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∏—à**
#     caption = (
#         f"üìã *–°–∏–∑ –∫–∏—Ä–∏—Ç–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä:*\n\n"
#         f"üë§ *–ò—Å–º:* {data.get('full_name', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üóì *–Å—à:* {data.get('age', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üèô *–®–∞“≥–∞—Ä:* {data.get('city', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üìç *–¢—É–º–∞–Ω:* {data.get('town', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üöó *–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏:* {data.get('type_of_car', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üìû *–¢–µ–ª:* {data.get('phone_number', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#     )
#
#     # ‚úÖ **“≤—É–∂–∂–∞—Ç –≤–∞ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–Ω–∏ —é–±–æ—Ä–∏—à**
#     if data.get("document"):
#         await message.answer_photo(photo=data["document"], caption="üìÑ *–°–∏–∑–Ω–∏–Ω–≥ –ü—Ä–∞–≤–∞–Ω–≥–∏–∑ *", parse_mode="Markdown")
#
#     if data.get("tex_passport"):
#         await message.answer_photo(photo=data["tex_passport"], caption="üìÑ *–°–∏–∑–Ω–∏–Ω–≥ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∏–Ω–≥–∏–∑*",
#                                    parse_mode="Markdown")
#
#     # ‚úÖ **–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞—à —É—á—É–Ω —é–±–æ—Ä–∏—à**
#     await message.answer(caption, parse_mode="Markdown")
#     await message.answer("üìã *–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Ç–∞—Å–¥–∏“õ–ª–∞–π—Å–∏–∑–º–∏?*", reply_markup=confirm_button(), parse_mode="Markdown")
#
#     await state.set_state(DriverState.user_confirm)
#
#
# @inform_router.callback_query(DriverState.user_confirm, F.data == "confirm_yes")
# async def process_confirm_yes(callback_query: CallbackQuery, state: FSMContext, bot):
#     """–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ (—à–æ—Ñ—ë—Ä) –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ –∞–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏—à."""
#     data = await state.get_data()
#     telegram_id = str(callback_query.from_user.id)
#
#     if not data:
#         await callback_query.message.answer("‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫: –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –π—û“õ–æ–ª–¥–∏! –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
#         return
#
#     # ‚úÖ **–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ ID –Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–≥–∞ “õ—û—à–∏—à**
#     data["telegram_id"] = telegram_id
#
#     print(f"‚úÖ –ê–¥–º–∏–Ω —Ç–∞—Å–¥–∏“õ–ª–∞—à —É—á—É–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä: {data}")  # DEBUG
#
#     caption = (
#         f"üìã –Ø–Ω–≥–∏ –®–æ—Ñ—ë—Ä:\n"
#         f"üë§ –ò—Å–º–∏: {data.get('full_name', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üóì –Å—à–∏: {data.get('age', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üèô –®–∞“≥–∞—Ä: {data.get('city', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üìç –¢—É–º–∞–Ω: {data.get('town', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üöó –ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏: {data.get('type_of_car', '–ù–æ–º–∞—ä–ª—É–º')}\n"
#         f"üìû –¢–µ–ª: {data.get('phone_number', '–ù–æ–º–∞—ä–ª—É–º')}\n\n\n"
#         "–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Ç–∞—Å–¥–∏–∫–ª–∞–π—Å–∏–∑–º–∏?"
#     )
#
#     msg = None  # ‚úÖ Ensure msg is always defined
#
#     for admin in admin_chat_id:
#         if data.get("document"):
#             await bot.send_photo(admin, photo=data["document"], caption="üìÑ “≤—É–∂–∂–∞—Ç (–ü—Ä–∞–≤–∞)")
#
#         if data.get("tex_passport"):
#             try:
#                 msg = await bot.send_photo(admin, photo=data["tex_passport"], caption=caption)
#             except:
#                 msg = await bot.send_document(admin, document=data["tex_passport"], caption=caption)
#
#     if msg:
#         message_id = msg.message_id  # ‚úÖ –ê–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏–ª–≥–∞–Ω —Ö–∞–±–∞—Ä ID —Å–∏–Ω–∏ —Å–∞“õ–ª–∞—à
#         pending_drivers[message_id] = data  # ‚úÖ **telegram_id –±–∏–ª–∞–Ω –±–∏—Ä–≥–∞ —Å–∞“õ–ª–∞–π–º–∏–∑!**
#         print(f"‚úÖ –ú–∞—ä–ª—É–º–æ—Ç —Å–∞“õ–ª–∞–Ω–¥–∏: {message_id} -> {data}")  # ‚úÖ Debug
#
#         await bot.edit_message_reply_markup(
#             chat_id=msg.chat.id,
#             message_id=message_id,
#             reply_markup=confirm_button1(message_id)  # ‚úÖ –•–∞–±–∞—Ä ID –±–∏–ª–∞–Ω —Ç—É–≥–º–∞–ª–∞—Ä —è—Ä–∞—Ç–∏—à
#         )
#
#     await callback_query.message.delete()
#     await callback_query.message.answer("‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –∞–¥–º–∏–Ω–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏, –∏–ª—Ç–∏–º–æ—Å –∫—É—Ç–∏–± —Ç—É—Ä–∏–Ω–≥.",
#                                         reply_markup=main_button())
#
#
# @inform_router.callback_query(F.data.startswith("admin_yes_"))
# async def admin_approve_driver(callback_query: CallbackQuery, bot: Bot):
#     """–ê–¥–º–∏–Ω —Ç–∞—Å–¥–∏“õ–ª–∞—Å–∞, —à–æ—Ñ—ë—Ä –±–∞–∑–∞–≥–∞ —Å–∞“õ–ª–∞–Ω–∞–¥–∏."""
#     message_id = int(callback_query.data.split("_")[-1])  # ‚úÖ –•–∞–±–∞—Ä ID –Ω–∏ –æ–ª–∏—à
#
#     print(f"üîç –ê–¥–º–∏–Ω —Ç–∞—Å–¥–∏“õ–ª–∞–≥–∞–Ω —Ö–∞–±–∞—Ä ID: {message_id}")  # ‚úÖ DEBUG
#
#     if message_id not in pending_drivers:
#         await callback_query.message.answer("‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫: –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏! –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
#         return
#
#     —à–æ—Ñ—ë—Ä_data = pending_drivers.pop(message_id)  # ‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∏—à –≤–∞ cachedan —û—á–∏—Ä–∏—à
#     user_id = —à–æ—Ñ—ë—Ä_data.get("telegram_id")  # ‚úÖ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ Telegram ID —Å–∏–Ω–∏ –æ–ª–∏—à
#
#     await save_driver_to_db(—à–æ—Ñ—ë—Ä_data, callback_query)
#
#     await callback_query.message.edit_reply_markup(reply_markup=None)
#     await callback_query.message.answer("‚úÖ –®–æ—Ñ—ë—Ä –±–∞–∑–∞–≥–∞ —Å–∞“õ–ª–∞–Ω–¥–∏!", reply_markup=admin_button())
#
#     if user_id:
#         await bot.send_message(user_id, "‚úÖ *–ê–¥–º–∏–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ “õ–∞–±—É–ª “õ–∏–ª–¥–∏!*", parse_mode="Markdown",
#                                reply_markup=driver_button())
#
#
# @inform_router.callback_query(DriverState.user_confirm, F.data == "confirm_no")
# async def process_confirm_no(callback_query: CallbackQuery, state: FSMContext):
#     """–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —à–æ—Ñ—ë—Ä –±—û–ª–∏—à–¥–∞–Ω –≤–æ–∑ –∫–µ—á–¥–∏."""
#     await state.clear()
#     await callback_query.message.answer("‚ùå –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.", reply_markup=main_button())
#
#
# @inform_router.callback_query(F.data.startswith("admin_no_"))
# async def admin_reject_driver(callback_query: CallbackQuery, bot: Bot):
#     """–ê–¥–º–∏–Ω —à–æ—Ñ—ë—Ä–Ω–∏ —Ä–∞–¥ —ç—Ç—Å–∞, —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–≥–∞ —Ö–∞–±–∞—Ä –±–æ—Ä–∞–¥–∏."""
#     message_id = int(callback_query.data.split("_")[-1])  # ‚úÖ –•–∞–±–∞—Ä ID –Ω–∏ –æ–ª–∏—à
#
#     print(f"üîç –ê–¥–º–∏–Ω —Ä–∞–¥ —ç—Ç–≥–∞–Ω —Ö–∞–±–∞—Ä ID: {message_id}")  # ‚úÖ DEBUG
#
#     if message_id not in pending_drivers:
#         await callback_query.message.answer("‚ö†Ô∏è –•–∞—Ç–æ–ª–∏–∫: –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏! –ò–ª—Ç–∏–º–æ—Å, “õ–∞–π—Ç–∞ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥.")
#         return
#
#     —à–æ—Ñ—ë—Ä_data = pending_drivers.pop(message_id)  # ‚úÖ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∏—à –≤–∞ cachedan —û—á–∏—Ä–∏—à
#     user_id = —à–æ—Ñ—ë—Ä_data.get("telegram_id")  # ‚úÖ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–Ω–∏–Ω–≥ Telegram ID —Å–∏–Ω–∏ –æ–ª–∏—à
#
#     await callback_query.message.edit_reply_markup(reply_markup=None)  # ‚úÖ –ò–Ω–ª–∞–π–Ω —Ç—É–≥–º–∞–ª–∞—Ä–Ω–∏ —û—á–∏—Ä–∏—à
#     await callback_query.message.answer("‚ùå –®–æ—Ñ—ë—Ä –∞—Ä–∏–∑–∞—Å–∏ —Ä–∞–¥ —ç—Ç–∏–ª–¥–∏!")
#     await callback_query.message.delete()
#     if user_id:
#         await bot.send_message(user_id, "‚ùå *–ê–¥–º–∏–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —Ä–∞–¥ —ç—Ç–¥–∏.*", parse_mode="Markdown",
#                                reply_markup=main_button())
#
#
# async def save_driver_to_db(data: dict, callback: CallbackQuery):
#     """–®–æ—Ñ—ë—Ä–Ω–∏ –±–∞–∑–∞–≥–∞ —Å–∞“õ–ª–∞—à —Ñ—É–Ω–∫—Ü–∏—è—Å–∏"""
#
#     telegram_id = data.get("telegram_id")  # ‚úÖ Telegram ID –Ω–∏ –æ–ª–∏—à
#
#     if not telegram_id:
#         print("‚ùå –•–∞—Ç–æ–ª–∏–∫: Telegram ID —Ç–æ–ø–∏–ª–º–∞–¥–∏!")
#         return
#
#     existing_driver = session.execute(
#         select(Driver).where(Driver.telegram_id == telegram_id)
#     ).scalars().first()
#
#     if existing_driver:
#         print(f"‚ùå –•–∞—Ç–æ–ª–∏–∫: –ë—É —à–æ—Ñ—ë—Ä ({telegram_id}) –∞–ª–ª–∞“õ–∞—á–æ–Ω —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω!")
#         return
#
#     print(f"‚úÖ –ë–∞–∑–∞–≥–∞ —Å–∞“õ–ª–∞–Ω–∞—ë—Ç–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä: {data}")
#
#     driver = Driver(
#         telegram_id=telegram_id,
#         full_name=data.get('full_name', 'No Name'),
#         age=int(data.get('age', 0)),
#         city=data.get('city', 'No City'),
#         town=data.get('town', 'No Town'),
#         type_of_car=data.get('type_of_car', 'No Car'),
#         phone_number=data.get('phone_number', 'No Number'),
#         document=data.get('document', 'No Document'),
#         tex_passport=data.get('tex_passport', 'No Tex Passport'),
#     )
#
#     session.add(driver)
#     session.commit()
#     print(f"‚úÖ –®–æ—Ñ—ë—Ä ({telegram_id}) –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ “õ—û—à–∏–ª–¥–∏!")
#
#
# """
# –®–æ—Ñ—ë—Ä
# """
#
# """–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —è–Ω–≥–∏–ª–∞—à “õ–∏—Å–º–∏"""
#
#
# def get_edit_driver_keyboard():
#     ikb = InlineKeyboardBuilder()
#     ikb.button(text="–ò—Å–º–∏–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_full_name")
#     ikb.button(text="–Å—à–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_age")
#     ikb.button(text="–®–∞“≥–∞—Ä–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_city")
#     ikb.button(text="–¢—É–º–∞–Ω–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_town")
#     ikb.button(text="–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_type_of_car")
#     ikb.button(text="–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_phone_number")
#     ikb.button(text="“≤—É–∂–∂–∞—Ç–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_document")
#     ikb.button(text="–¢–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏—à", callback_data="edit_tex_passport")
#     ikb.adjust(1)
#     return ikb.as_markup()
#
#
# async def update_driver_field(user_id: int, field_name: str, value: str):
#     query = update(Driver).where(Driver.telegram_id == user_id).values({field_name: value})
#     session.execute(query)
#     session.commit()
#
#
# @inform_router.message(F.text == "üíº –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —è–Ω–≥–∏–ª–∞—à")
# async def change_datas(message: Message):
#     await message.answer("“ö–∞–π—Å–∏ –º–∞—ä–ª—É–º–æ—Ç–∏–Ω–≥–∏–∑–Ω–∏ –∞–ª–º–∞—à—Ç–∏—Ä–º–æ“õ—á–∏—Å–∏–∑?", reply_markup=get_edit_driver_keyboard())
#
#
# @inform_router.callback_query(F.data == "edit_full_name")
# async def edit_full_name(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–Ø–Ω–≥–∏ –∏—Å–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: –ê–ª–∏):", reply_markup=cancel_button1(callback))
#     await state.set_state(EditDriverState.full_name)
#     await callback.answer()
#
#
# @inform_router.message(EditDriverState.full_name)
# async def save_full_name(message: Message, state: FSMContext):
#     full_name = message.text
#     await update_driver_field(message.from_user.id, "full_name", full_name)
#
#     await message.answer(f"–ò—Å–º–∏–Ω–≥–∏–∑ —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {full_name}", reply_markup=driver_button())
#     await state.clear()
#
#
# @inform_router.callback_query(F.data == "edit_age")
# async def edit_age(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–Ø–Ω–≥–∏ —ë—à–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: 21):", reply_markup=cancel_button1(callback))
#     await state.set_state(EditDriverState.age)
#     await callback.answer()
#
#
# @inform_router.message(EditDriverState.age)
# async def save_age(message: Message, state: FSMContext):
#     if not message.text.isdigit():
#         await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —ë—à–∏–Ω–≥–∏–∑–Ω–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º —Å–∏—Ñ–∞—Ç–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥! (–ú–∞—Å–∞–ª–∞–Ω: 25)",
#                              reply_markup=cancel_button(message))
#         return
#     age = int(message.text)
#     await update_driver_field(message.from_user.id, "age", age)
#
#     await message.answer(f"–Å—à–∏–Ω–≥–∏–∑ —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {age}", reply_markup=driver_button())
#     await state.clear()
#
#
# @inform_router.callback_query(F.data == "edit_city")
# async def edit_city(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–Ø–Ω–≥–∏ —à–∞“≥–∞—Ä–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: –ê–Ω–¥–∏–∂–æ–Ω):", reply_markup=cancel_button1(callback))
#     await state.set_state(EditDriverState.city)
#     await callback.answer()
#
#
# @inform_router.message(EditDriverState.city)
# async def save_city(message: Message, state: FSMContext):
#     city = message.text
#     await update_driver_field(message.from_user.id, "city", city)
#
#     await message.answer(f"–®–∞“≥–∞—Ä —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {city}", reply_markup=driver_button())
#     await state.clear()
#
#
# @inform_router.callback_query(F.data == "edit_town")
# async def edit_town(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–Ø–Ω–≥–∏ —Ç—É–º–∞–Ω–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: –ñ–∞–ª–∞–∫—É–¥—É–∫):", reply_markup=cancel_button1(callback))
#     await state.set_state(EditDriverState.town)
#     await callback.answer()
#
#
# @inform_router.message(EditDriverState.town)
# async def save_town(message: Message, state: FSMContext):
#     town = message.text
#     await update_driver_field(message.from_user.id, "town", town)
#
#     await message.answer(f"–¢—É–º–∞–Ω —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {town}", reply_markup=driver_button())
#     await state.clear()
#
#
# @inform_router.callback_query(F.data == "edit_type_of_car")
# async def edit_type_of_car(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–Ø–Ω–≥–∏ –º–∞—à–∏–Ω–∞ —Ç—É—Ä–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: –ñ–µ–Ω—Ç—Ä–∞):",
#                                   reply_markup=cancel_button1(callback))
#     await state.set_state(EditDriverState.type_of_car)
#     await callback.answer()
#
#
# @inform_router.message(EditDriverState.type_of_car)
# async def save_type_of_car(message: Message, state: FSMContext):
#     type_of_car = message.text
#     await update_driver_field(message.from_user.id, "type_of_car", type_of_car)
#
#     await message.answer(f"–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏ —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {type_of_car}", reply_markup=driver_button())
#     await state.clear()
#
#
# @inform_router.callback_query(F.data == "edit_phone_number")
# async def edit_phone_number(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("–Ø–Ω–≥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ (–ú–∞—Å–∞–ª–∞–Ω: 970501655):",
#                                   reply_markup=cancel_button1(callback))
#     await state.set_state(EditDriverState.phone_number)
#     await callback.answer()
#
#
# @inform_router.message(EditDriverState.phone_number)
# async def save_phone_number(message: Message, state: FSMContext):
#     if not message.text.isdigit():
#         await message.answer(
#             "‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–Ω–∏ —Ñ–∞“õ–∞—Ç —Ä–∞“õ–∞–º–ª–∞—Ä–¥–∞–Ω –∏–±–æ—Ä–∞—Ç “õ–∏–ª–∏–± –∫–∏—Ä–∏—Ç–∏–Ω–≥! (–ú–∞—Å–∞–ª–∞–Ω: 970501655)",
#             reply_markup=cancel_button(message))
#         return
#     phone_number = int(message.text)
#     await update_driver_field(message.from_user.id, "phone_number", phone_number)
#
#     await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º —è–Ω–≥–∏–ª–∞–Ω–¥–∏: {phone_number}", reply_markup=driver_button())
#     await state.clear()
#
#
# @inform_router.callback_query(F.data == "edit_document")
# async def edit_document(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("üìÑ –Ø–Ω–≥–∏ “≥—É–∂–∂–∞—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=cancel_button1(callback))
#     await state.set_state(EditDriverState.document)
#     await callback.answer()
#
#
# @inform_router.message(EditDriverState.document)
# async def save_document(message: Message, state: FSMContext):
#     if message.photo:
#         document = message.photo[-1].file_id
#     elif message.document:
#         document = message.document.file_id
#     else:
#         await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ä–∞—Å–º —ë–∫–∏ PDF “≥—É–∂–∂–∞—Ç —é–±–æ—Ä–∏–Ω–≥!", reply_markup=cancel_button(message))
#         return
#
#     await update_driver_field(message.from_user.id, "document", document)
#     await message.answer("‚úÖ “≤—É–∂–∂–∞—Ç —è–Ω–≥–∏–ª–∞–Ω–¥–∏!", reply_markup=driver_button())
#
#
# @inform_router.callback_query(F.data == "edit_tex_passport")
# async def edit_tex_passport(callback: CallbackQuery, state: FSMContext):
#     await callback.message.answer("üìÉ –Ø–Ω–≥–∏ —Ç–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=cancel_button1(callback))
#     await state.set_state(EditDriverState.tex_passport)
#     await callback.answer()
#
#
# @inform_router.message(EditDriverState.tex_passport)
# async def save_tex_passport(message: Message, state: FSMContext):
#     if message.photo:
#         tex_passport = message.photo[-1].file_id
#     elif message.document:
#         tex_passport = message.document.file_id
#     else:
#         await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ä–∞—Å–º —ë–∫–∏ PDF “≥—É–∂–∂–∞—Ç —é–±–æ—Ä–∏–Ω–≥!", reply_markup=cancel_button(message))
#         return
#
#     await update_driver_field(message.from_user.id, "tex_passport", tex_passport)
#     await message.answer("‚úÖ –¢–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç —è–Ω–≥–∏–ª–∞–Ω–¥–∏!", reply_markup=driver_button())
#     await state.clear()


# '''
# –ù–∞–≤–±–∞—Ç–≥–∞ —Ç—É—Ä–∏—à “õ–∏—Å–º–∏
# '''
# from datetime import datetime, timedelta, time
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
#
# queue_counter = 0  # –ù–∞–≤–±–∞—Ç–≥–∞ —Ç—É—Ä–≥–∞–Ω–ª–∞—Ä —É—á—É–Ω –≥–ª–æ–±–∞–ª “≥–∏—Å–æ–±–ª–∞–≥–∏—á
#
# # **üîπ –ù–ê–í–ë–ê–¢–ì–ê –¢–£–†–ò–® –ë–û–®–õ–ê–ù–ò–® –í–ê“ö–¢–ò**
# NAVBAT_START_TIME = time(9, 0)  # 21:00 –¥–∞ –±–æ—à–ª–∞–Ω–∞–¥–∏
# NAVBAT_END_TIME = (
#         datetime.combine(datetime.today(), NAVBAT_START_TIME) + timedelta(hours=2)).time()  # 2 —Å–æ–∞—Ç –¥–∞–≤–æ–º —ç—Ç–∞–¥–∏
#
# # **üîπ –ô–é–ù–ê–õ–ò–®–õ–ê–†**
# ROUTES = [
#     "–ê–Ω–¥–∏–∂–æ–Ω -> –¢–æ—à–∫–µ–Ω—Ç",
#     "–¢–æ—à–∫–µ–Ω—Ç -> –ê–Ω–¥–∏–∂–æ–Ω"
# ]
#
#
# @inform_router.message(F.text == "üîâ –ù–∞–≤–±–∞—Ç–≥–∞ —Ç—É—Ä–∏—à")
# async def to_queue_start(message: Message, state: FSMContext):
#     """üöÄ –ù–ê–í–ë–ê–¢–ì–ê –¢–£–†–ò–®–ù–ò –ë–û–®–õ–ê–®"""
#     now = datetime.now().time()
#
#     # ‚úÖ –ù–ê–í–ë–ê–¢–ì–ê –¢–£–†–ò–® –í–ê“ö–¢–ò –¢–ï–ö–®–ò–†–ò–õ–ê–î–ò
#     if not (NAVBAT_START_TIME <= now <= NAVBAT_END_TIME):
#         await message.answer(f"‚õîÔ∏è –ö–µ—á–∏—Ä–∞—Å–∏–∑, –Ω–∞–≤–±–∞—Ç–≥–∞ —Ç—É—Ä–∏—à –≤–∞“õ—Ç–∏ —Ç—É–≥–∞–≥–∞–Ω.\n\n"
#                              f"üïí –ù–∞–≤–±–∞—Ç–≥–∞ —Ç—É—Ä–∏—à {NAVBAT_START_TIME.strftime('%H:%M')} –¥–∞–Ω "
#                              f"{NAVBAT_END_TIME.strftime('%H:%M')} –≥–∞—á–∞ –¥–∞–≤–æ–º —ç—Ç–≥–∞–Ω.")
#         return
#
#     # ‚úÖ “≤–∞–π–¥–æ–≤—á–∏–Ω–∏ –±–∞–∑–∞–¥–∞–Ω —Ç–æ–ø–∞–º–∏–∑
#     driver = session.execute(
#         select(Driver).where(Driver.telegram_id == str(message.from_user.id))
#     ).scalars().first()
#
#     if not driver:
#         await message.answer("‚ö†Ô∏è –°–∏–∑ “≥–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∏–∑! –ê–≤–≤–∞–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–Ω–≥.", main_button())
#         return
#
#     # ‚úÖ –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏ –∞–ª–ª–∞“õ–∞—á–æ–Ω –±—É–≥—É–Ω –Ω–∞–≤–±–∞—Ç–≥–∞ —Ç—É—Ä–≥–∞–Ω –±—û–ª—Å–∞, —É–Ω–≥–∞ —è–Ω–∞ —Ä—É—Ö—Å–∞—Ç –±–µ—Ä–º–∞–π–º–∏–∑
#     today = datetime.today().date()
#     if driver.queue and driver.date_added and driver.date_added.date() == today:
#         await message.answer(f"‚è≥ –°–∏–∑ –±—É–≥—É–Ω –∞–ª–ª–∞“õ–∞—á–æ–Ω –Ω–∞–≤–±–∞—Ç–≥–∞ —Ç—É—Ä–≥–∞–Ω—Å–∏–∑! –¢–∞—Ä—Ç–∏–± —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑: {driver.queue}")
#         return
#
#     # ‚úÖ –≠–Ω–≥ –∫–∞—Ç—Ç–∞ –Ω–∞–≤–±–∞—Ç —Ä–∞“õ–∞–º–∏–Ω–∏ –æ–ª–∏–±, –∫–µ–π–∏–Ω–≥–∏—Å–∏–Ω–∏ –±–µ–ª–≥–∏–ª–∞–π–º–∏–∑
#     max_queue = session.execute(select(func.max(Driver.queue))).scalar() or 0
#     new_queue = max_queue + 1
#
#     await state.update_data(queue=new_queue)
#     await message.answer("üìç “ö–∞–µ—Ä–≥–∞ –∫–µ—Ç–º–æ“õ—á–∏—Å–∏–∑?\n\n\n  –¢–∞–Ω–ª–∞–Ω–≥ üëá", reply_markup=get_route_keyboard())
#     await state.set_state(OrderState.route)
#
#
# @inform_router.callback_query(F.data.startswith("route_"))
# async def to_queue_route(callback: CallbackQuery, state: FSMContext):
#     """üöó “≤–ê–ô–î–û–í–ß–ò–ù–ò–ù–ì –ô–é–ù–ê–õ–ò–®–ò–ù–ò “ö–ê–ë–£–õ “ö–ò–õ–ò–®"""
#     route = callback.data.split("_", 1)[1]  # route_–ê–Ω–¥–∏–∂–æ–Ω -> –¢–æ—à–∫–µ–Ω—Ç => "–ê–Ω–¥–∏–∂–æ–Ω -> –¢–æ—à–∫–µ–Ω—Ç"
#
#     await state.update_data(route=route)
#     await callback.message.answer("‚è≥ –ù–µ—á–∏–¥–∞ –π–æ–ª–≥–∞ —á–∏–∫–∏—à–∏–Ω–≥–∏–∑ –∫–µ—Ä–∞–∫? \n\n(–ú–∞—Å–∞–ª–∞–Ω: 19:00)",
#                                   reply_markup=cancel_button1(callback))
#     await state.set_state(OrderState.delivery_time)
#     await callback.answer()
#
#
# @inform_router.message(OrderState.delivery_time)
# async def to_queue_delivery_time(message: Message, state: FSMContext):
#     """üïí “≤–ê–ô–î–û–í–ß–ò–ù–ò–ù–ì –ë–û–†–ò–® –í–ê“ö–¢–ò–ù–ò “ö–ê–ë–£–õ “ö–ò–õ–ò–®"""
#     try:
#         delivery_time = datetime.strptime(message.text.strip(), "%H:%M").time()
#     except ValueError:
#         await message.answer("‚ö†Ô∏è –ò–ª—Ç–∏–º–æ—Å, —Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ —ë–∑–∏–Ω–≥! –ú–∞—Å–∞–ª–∞–Ω: 15:30", reply_markup=cancel_button(message))
#         return
#
#     # ‚úÖ –Ø–Ω–≥–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —Å–∞“õ–ª–∞–π–º–∏–∑
#     data = await state.get_data()
#     driver = session.execute(select(Driver).where(Driver.telegram_id == str(message.from_user.id))).scalars().first()
#     driver.queue = data['queue']
#     driver.route = data['route']
#     driver.delivery_time = datetime.combine(datetime.today(), delivery_time)
#     driver.date_added = datetime.now()
#     session.commit()
#
#     await message.answer(f"‚úÖ –°–∏–∑ –Ω–∞–≤–±–∞—Ç–≥–∞ —Ç—É—Ä–≥–∞–Ω–∏–Ω–≥–∏–∑ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏! üöñ\n"
#                          f"üî¢ –¢–∞—Ä—Ç–∏–± —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑: {data['queue']}\n"
#                          f"üìç –ô—û–Ω–∞–ª–∏—à: {data['route']}\n"
#                          f"üïí –ï—Ç–∏–± –±–æ—Ä–∏—à –≤–∞“õ—Ç–∏: {delivery_time.strftime('%H:%M')}")
#     await message.answer(f"–ò–ª—Ç–∏–º–æ—Å, –∫–ª–∏–µ–Ω—Ç –±—û–ª–∏—à–∏–Ω–∏ –∫—É—Ç–∏–Ω–≥. –ö–ª–∏–µ–Ω—Ç –±—û–ª–∏—à–∏ –±–∏–ª–∞–Ω–æ“õ —Å–∏–∑ –±–∏–ª–∞–Ω –±–æ–≥–ª–∞–Ω–∞–º–∏–∑ üòä",
#                          reply_markup=driver_button())
#     await state.clear()


@inform_router.message(F.text == "üìä –ú–µ–Ω–∏–Ω–≥ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–º")
async def show_driver_info(message: Message):
    """“≤–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ –±–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∞–¥–∏."""

    # 1Ô∏è‚É£ “≤–∞–π–¥–æ–≤—á–∏–Ω–∏ –±–∞–∑–∞–¥–∞–Ω —Ç–æ–ø–∞–º–∏–∑
    driver = session.execute(
        select(Driver).where(Driver.telegram_id == str(message.from_user.id))
    ).scalars().first()

    # 2Ô∏è‚É£ –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏ –±–∞–∑–∞–¥–∞ –±—û–ª–º–∞—Å–∞, —Ö–∞–±–∞—Ä —á–∏“õ–∞—Ä–∞–º–∏–∑
    if not driver:
        await message.answer("‚ö†Ô∏è –°–∏–∑ “≥–∞–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–º–∞–≥–∞–Ω—Å–∏–∑! –ê–≤–≤–∞–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏ —Ç—û–ª–¥–∏—Ä–∏–Ω–≥.")
        return

    # 3Ô∏è‚É£ “≤–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ –±–∞—Ä—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–∏ —á–∏“õ–∞—Ä–∞–º–∏–∑
    caption = (
        f"üìã *–°–∏–∑–Ω–∏–Ω–≥ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑:*\n\n"
        f"üë§ *–ò—Å–º:* {driver.full_name}\n"
        f"üóì *–Å—à:* {driver.age}\n"
        f"üèô *–®–∞“≥–∞—Ä:* {driver.city}\n"
        f"üìç *–¢—É–º–∞–Ω:* {driver.town}\n"
        f"üöó *–ú–∞—à–∏–Ω–∞ —Ç—É—Ä–∏:* {driver.type_of_car}\n"
        f"üìû *–¢–µ–ª:* {driver.phone_number}\n"
        f"üî¢ *–ù–∞–≤–±–∞—Ç —Ä–∞“õ–∞–º–∏:* {driver.queue if driver.queue else '–ô—û“õ'}\n"
    )

    await message.answer(caption, parse_mode="Markdown")

    # 4Ô∏è‚É£ –ê–≥–∞—Ä “≥–∞–π–¥–æ–≤—á–∏–Ω–∏–Ω–≥ “≥—É–∂–∂–∞—Ç–ª–∞—Ä–∏ –±—û–ª—Å–∞, —Ä–∞—Å–º —Å–∏—Ñ–∞—Ç–∏–¥–∞ —é–±–æ—Ä–∞–º–∏–∑
    if driver.document:
        await message.answer_photo(driver.document, caption="üìÑ *–°–∏–∑–Ω–∏–Ω–≥ “≥—É–∂–∂–∞—Ç–∏–Ω–≥–∏–∑ (–ü—Ä–∞–≤–∞)*",
                                   parse_mode="Markdown")

    if driver.tex_passport:
        await message.answer_photo(driver.tex_passport, caption="üìÉ *–°–∏–∑–Ω–∏–Ω–≥ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∏–Ω–≥–∏–∑*",
                                   parse_mode="Markdown")


@inform_router.message(F.text == "üìû –ê–¥–º–∏–Ω –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à")
async def contact_with_admin(message: Message):
    await message.answer("–ò–ª—Ç–∏–º–æ—Å —à—É –æ–¥–∞–º–≥–∞ –¢–µ–ª–µ–≥—Ä–∞–º–¥–∞–Ω —ë–∑–∏–Ω–≥ @Mirzajonow_21")


# üîπ **Admin Paneli**
# KeyboardButton(text="–ê -> –¢ –®–æ–ø–∏—Ä–ª–∞—Ä"),
# KeyboardButton(text="–¢ -> –ê –®–æ–ø–∏—Ä–ª–∞—Ä"),
@inform_router.message(F.text == "üîÖ –ê -> –¢ –®–æ–ø–∏—Ä–ª–∞—Ä", IsAdmin())
async def admin_panel1(message: Message):
    """–ë—É–≥—É–Ω–≥–∏ –ê–Ω–¥–∏–∂–æ–Ω–¥–∞–Ω –¢–æ—à–∫–µ–Ω—Ç–≥–∞ –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω —à–æ—Ñ–µ—Ä–ª–∞—Ä–Ω–∏ —á–∏“õ–∞—Ä–∞–¥–∏"""
    drivers = session.query(Driver).filter(
        Driver.route == "–ê–Ω–¥–∏–∂–æ–Ω -> –¢–æ—à–∫–µ–Ω—Ç",
        Driver.date_added >= datetime.now().date()
    ).order_by(Driver.queue).all()

    if not drivers:
        await message.answer("üöñ –ë—É–≥—É–Ω –ê–Ω–¥–∏–∂–æ–Ω–¥–∞–Ω –¢–æ—à–∫–µ–Ω—Ç–≥–∞ –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω —à–æ—Ñ—ë—Ä–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")
        return

    response = "üöñ *–ê–Ω–¥–∏–∂–æ–Ω -> –¢–æ—à–∫–µ–Ω—Ç —à–æ—Ñ—ë—Ä–ª–∞—Ä–∏*\n\n"
    for driver in drivers:
        response += f"üèô *–¢–∞—Ä—Ç–∏–± —Ä–∞–∫–∞–º–∏:* {driver.queue}\n"
        response += f"üèô *–ò—Å–º–∏:* {driver.full_name}\n"
        response += f"üèô *–¢—É–º–∞–Ω:* {driver.town}\n"
        response += f"‚è∞ *–ö–µ—Ç–∏—à –≤–∞“õ—Ç–∏:* {driver.delivery_time}\n"
        response += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {driver.phone_number}\n"
        response += "---------------------\n"

    await message.answer(response, parse_mode="Markdown")


@inform_router.message(F.text == "üîÖ –¢ -> –ê –®–æ–ø–∏—Ä–ª–∞—Ä", IsAdmin())
async def admin_panel(message: Message):
    """–ë—É–≥—É–Ω–≥–∏ –¢–æ—à–∫–µ–Ω—Ç–¥–∞–Ω –ê–Ω–¥–∏–∂–æ–Ω–≥–∞ –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω —à–æ—Ñ–µ—Ä–ª–∞—Ä–Ω–∏ —á–∏“õ–∞—Ä–∞–¥–∏"""
    drivers = session.query(Driver).filter(
        Driver.route == "–¢–æ—à–∫–µ–Ω—Ç -> –ê–Ω–¥–∏–∂–æ–Ω",
        Driver.date_added >= datetime.now().date()
    ).order_by(Driver.queue).all()

    if not drivers:
        await message.answer("üöñ –ë—É–≥—É–Ω –¢–æ—à–∫–µ–Ω—Ç–¥–∞–Ω –ê–Ω–¥–∏–∂–æ–Ω–≥–∞ –∫–µ—Ç–∞—ë—Ç–≥–∞–Ω —à–æ—Ñ—ë—Ä–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")
        return

    response = "üöñ *–¢–æ—à–∫–µ–Ω—Ç -> –ê–Ω–¥–∏–∂–æ–Ω —à–æ—Ñ—ë—Ä–ª–∞—Ä–∏*\n\n"
    for driver in drivers:
        response += f"üèô *–¢–∞—Ä—Ç–∏–± —Ä–∞–∫–∞–º–∏:* {driver.queue}\n"
        response += f"üèô *–ò—Å–º–∏:* {driver.full_name}\n"
        response += f"üèô *–¢—É–º–∞–Ω:* {driver.town}\n"
        response += f"‚è∞ *–ö–µ—Ç–∏—à –≤–∞“õ—Ç–∏:* {driver.delivery_time}\n"
        response += f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {driver.phone_number}\n"
        response += "---------------------\n"

    await message.answer(response, parse_mode="Markdown")
# @inform_router.message(F.text == "üîÑ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ –¢–æ–∑–∞–ª–∞—à", IsAdmin())
# async def clear_orders(message: Message):
#     """üìå –ê–¥–º–∏–Ω –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ —û—á–∏—Ä–∏—à"""
#     global PENDING_ORDERS
#     PENDING_ORDERS = []
#     await message.answer("‚úÖ –ë–∞—Ä—á–∞ –Ω–∞–≤–±–∞—Ç–¥–∞–≥–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä —û—á–∏—Ä–∏–ª–¥–∏!")


# from sqlalchemy.sql import text
#
# # üìã **Buyurtmalar ro‚Äòyxati**
# PENDING_ORDERS = []
#
#
# async def get_ready_driver(session, route: str, delivery_time: str, bot: Bot):
#     """üõ£ Yo‚Äònalish, yetib borish vaqti va bo‚Äòsh joy borligini tekshirib haydovchini topish"""
#     today = datetime.now().date()
#
#     # **üöÄ 1. Barcha haydovchilarni olish (queue ASC bo‚Äòyicha)**
#     query = text("""
#         SELECT id, telegram_id, full_name, phone_number,delivery_time,client_count, route, TIME(delivery_time) as time_only, date_added, queue
#         FROM drivers
#         WHERE route = :route
#         AND TIME(delivery_time) = TIME(:delivery_time)
#         AND DATE(date_added) = :today
#         AND COALESCE(client_count, 0) < 4
#         ORDER BY queue ASC
#     """)
#
#     all_drivers = session.execute(query, {
#         "route": route,
#         "delivery_time": delivery_time,
#         "today": today
#     }).fetchall()
#
#     print(f"üü¢ {route} bo‚Äòyicha {delivery_time} uchun mos haydovchilar: {all_drivers}")  # DEBUG LOG
#
#     for driver in all_drivers:
#         driver_id = driver.id
#         driver_name = driver.full_name
#         driver_queue = driver.queue
#         driver_clients = driver.client_count if driver.client_count is not None else 0
#         driver_telegram_id = driver.telegram_id
#
#         print(f"üîç Tekshirilayotgan haydovchi: {driver_name}, Queue: {driver_queue}, Client Count: {driver_clients}")
#
#         # **üìå 4 ta mijoz olgan haydovchini o'tkazib yuboramiz**
#         if driver_clients >= 4:
#             print(f"‚è© {driver_name} ({driver_queue}) haydovchining `client_count = 4`, keyingisiga o‚Äòtamiz...")
#             continue
#
#             # **‚úÖ 4. Mijoz biriktiramiz**
#         update_query = text("""
#             UPDATE drivers
#             SET client_count = COALESCE(client_count, 0) + 1
#             WHERE id = :driver_id
#         """)
#         session.execute(update_query, {"driver_id": driver_id})
#         session.commit()
#
#         print(f"‚úÖ {driver_name} ({driver_queue}) haydovchiga mijoz biriktirildi!")
#
#         # **üöñ Agar bu haydovchining 4-mijoz bo‚Äòlsa, unga maxsus xabar yuboramiz**
#         if driver_clients + 1 == 4:
#             await bot.send_message(
#                 driver_telegram_id,
#                 "‚úÖ –°–∏–∑–¥–∞ 4 —Ç–∞ –º–∏–∂–æ–∑ –π–∏“ì–∏–ª–¥–∏!\n–ô—û–ª–∏–Ω–≥–∏–∑ –±–µ—Ö–∞—Ç–∞—Ä –±—û–ª—Å–∏–Ω! üöñ"
#             )
#         return driver
#
#     print("üö´ Tayyor shofyor topilmadi!")
#     return None
