import os
import asyncio
import aiogram.exceptions
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

from handlers.inform import IsAdmin
from keyboards import admin_button
from state import AdminState
from models import session, User

# üîπ **–ê–¥–º–∏–Ω —Ç—É–≥–º–∞–ª–∞—Ä–∏**


load_dotenv()
ADMIN_ID = int(os.getenv('ADMIN_ID'))
admin_router = Router()


# üìå **–ê–¥–º–∏–Ω –±—û–ª–∏–º–∏–≥–∞ —û—Ç–∏—à “≥–∞–≤–æ–ª–∞—Å–∏**
@admin_router.message(F.text == "–ê–¥–º–∏–Ω –ë—û–ª–∏–º–∏")
async def admin_panel(message: Message):
    link = 'http://localhost:8050'
    await message.answer(text=f'üîó –ê–¥–º–∏–Ω –ë—û–ª–∏–º–∏–≥–∞ —û—Ç–∏—à: {link}')


# üìå **–†–µ–∫–ª–∞–º–∞ –∂–∞—Ä–∞—ë–Ω–∏–Ω–∏ –±–æ—à–ª–∞—à**
@admin_router.message(F.text == '–†–µ–∫–ª–∞–º–∞ üîä', IsAdmin())
async def start_advertisement(message: Message, state: FSMContext):
    await message.answer("üì∏ –†–µ–∫–ª–∞–º–∞ —Ä–∞—Å–º–∏–Ω–∏ —é–±–æ—Ä–∏–Ω–≥!")
    await state.set_state(AdminState.photo)


# üìå **–†–µ–∫–ª–∞–º–∞ —É—á—É–Ω —Ä–∞—Å–º —é–∫–ª–∞—à**
@admin_router.message(AdminState.photo, IsAdmin(), F.photo)
async def capture_ad_photo(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    await state.set_state(AdminState.title)
    await message.answer("üìù –†–µ–∫–ª–∞–º–∞ “≥–∞“õ–∏–¥–∞ —Ç—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç –∫–∏—Ä–∏—Ç–∏–Ω–≥!")


# üìå **–†–µ–∫–ª–∞–º–∞ –º–∞—Ç–Ω–∏–Ω–∏ “õ–∞–±—É–ª “õ–∏–ª–∏—à –≤–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–≥–∞ —é–±–æ—Ä–∏—à**
@admin_router.message(AdminState.title, IsAdmin(), ~F.photo)
async def send_advertisement(message: Message, state: FSMContext):
    title = message.text
    data = await state.get_data()
    await state.clear()

    users = session.query(User).filter(User.user_id.isnot(None)).all()

    if not users:
        await message.answer("üö´ “≤–µ—á –∫–∏–º–≥–∞ —Ä–µ–∫–ª–∞–º–∞ —é–±–æ—Ä–∏–ª–º–∞–¥–∏. –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.")
        return

    tasks = []
    deleted_users = []

    for user in users:
        if user.user_id:
            try:
                # ‚úÖ **–†–µ–∫–ª–∞–º–∞ —é–±–æ—Ä–∏—à**
                tasks.append(message.bot.send_photo(
                    chat_id=user.user_id,
                    photo=data['photo'],
                    caption=title
                ))

            except aiogram.exceptions.TelegramForbiddenError:
                print(f'üö´ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {user.user_id} –±–æ—Ç–Ω–∏ –±–ª–æ–∫–ª–∞–≥–∞–Ω —ë–∫–∏ –≥—É—Ä—É“≥–¥–∞–Ω —á–∏“õ–∏–± –∫–µ—Ç–≥–∞–Ω.')
                deleted_users.append(user.user_id)

            except aiogram.exceptions.TelegramBadRequest as e:
                if "chat not found" in str(e):
                    print(f'üö´ –§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ {user.user_id} —Ç–æ–ø–∏–ª–º–∞–¥–∏. –é—á–∏—Ä–∏—à–≥–∞ —Ç–∞–π—ë—Ä–ª–∞–Ω–º–æ“õ–¥–∞.')
                    deleted_users.append(user.user_id)
                else:
                    print(f'‚ùå {user.user_id} –≥–∞ —é–±–æ—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}')

    # ‚úÖ **–ë–ª–æ–∫–ª–∞–≥–∞–Ω —ë–∫–∏ —Ç–æ–ø–∏–ª–º–∞–≥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–Ω–∏ –±–∞–∑–∞–¥–∞–Ω —û—á–∏—Ä–∏—à**
    if deleted_users:
        session.query(User).filter(User.user_id.in_(deleted_users)).delete(synchronize_session=False)
        session.commit()
        print(f"üóëÔ∏è {len(deleted_users)} —Ç–∞ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ –±–∞–∑–∞–¥–∞–Ω —û—á–∏—Ä–∏–ª–¥–∏.")

    if tasks:
        await asyncio.gather(*tasks)

    await message.answer("‚úÖ –†–µ–∫–ª–∞–º–∞ –±–∞—Ä—á–∞ –∞–∫—Ç–∏–≤ —Ñ–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏–ª–∞—Ä–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏!", reply_markup=admin_button())

# üìå **–ë—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ —Ç–æ–∑–∞–ª–∞—à**
# @admin_router.message(F.text == "üîÑ –ë—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ –¢–æ–∑–∞–ª–∞—à", F.from_user.id == ADMIN_ID)
# async def clear_orders(message: Message):
#     global PENDING_ORDERS
#     PENDING_ORDERS = []
#     await message.answer("‚úÖ –ë–∞—Ä—á–∞ –Ω–∞–≤–±–∞—Ç–¥–∞–≥–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä —û—á–∏—Ä–∏–ª–¥–∏!")
